package main

import (
"fmt"
"github.com/dustin/go-humanize"
)

func getFinesTotal(fines []FineWithPlayer) float64 {
	if(len(fines) > 0){
		var total float64 = 0
		for _, f := range fines {
			total += f.Fine.Amount
		}
		return total
	}
	return 0
}

templ fineList(fines []FineWithPlayer, page int, isFineMaster bool) {
	<div
 		class="m-2 bg-gray-200 h-full shadow-xl p-2 h-full mt-10"
 		id="fine-list-container"
	>
		<div class="text-center">
			<div class="flex justify-center items-center mb-4 cursor-pointer" hx-get="/fines" hx-target="#fine-list-container" hx-swap="outerHTML" hx-trigger="click">
				<span class="flex-grow text-center font-bold">Recent Fine List</span>
				<span class="text-3xl ml-2">â†»</span>
			</div>
			if isFineMaster {
				<div>{ fmt.Sprintf("$%v", getFinesTotal(fines)) }</div>
			}
			<table id="fine-list" class="min-w-full">
				<tbody class="divide-y divide-gray-900">
					for _, f := range fines {
						@fineRow(isFineMaster, f)
					}
				</tbody>
			</table>
		</div>
	</div>
}

templ fineRow(isFineMaster bool, f FineWithPlayer) {
	<tr
 		id={ fmt.Sprintf("fr-%d", f.Fine.ID) }
 		class="bg-gray-200 p-2"
	>
		<td class="p-2 text-gray-900 flex flex-col text-wrap">
			<div class="text-bold text-3xl">{ f.Player.Name }</div>
			<div class="text-2xl">
				{ f.Fine.Reason }
			</div>
			<div class="italic">
				if f.Fine.Approved {
					{ fmt.Sprintf("$%v - ", f.Fine.Amount) }
				}
				if len(f.Match.Opponent) > 0 {
					{ f.Match.Opponent }
					- 
					if f.Match.StartTime != nil {
						{ niceDate(f.Match.StartTime) }
					}
				} else {
					({ humanize.Time(f.Fine.FineAt) })
				}
			</div>
		</td>
		<td>
			<div class="text-lg text-gray-900 text-wrap">
				{ f.Fine.Context }
				<div>
					<button
 						hx-get={ fmt.Sprintf("/fines/edit/%d?isContext=true", f.Fine.ID) }
 						hx-swap="outerHTML"
 						class={ smPri }
					>
						if len(f.Fine.Context) == 0 {
							Add Context	
						} else {
							Edit Context
						}
					</button>
				</div>
			</div>
		</td>
		<td>
			if isFineMaster {
				if !f.Fine.Approved {
					<div>
						<form hx-post="/fines/approve" hx-swap="outerHTML" ethod="POST">
							<input
 								type="hidden"
 								name="fid"
 								value={ fmt.Sprintf("%d", f.Fine.ID) }
							/>
							$
							<input
 								type="number"
 								name="amount"
 								id="amount-input-3"
 								class="px-2 py-1 border rounded"
 								placeholder="Set amount"
 								if f.Fine.Amount > 0 {
									value={ fmt.Sprintf("%v", f.Fine.Amount) }
								} else {
									value="2"
								}
							/>
							<button
 								type="submit"
 								class={ bigAdd }
							>
								Approve
							</button>
						</form>
					</div>
				}
			}
			if len(f.Fine.Contest) == 0 {
				<div class="max-w-96">
					<button
 						hx-get={ fmt.Sprintf("/fines/edit/%d?isContest=true", f.Fine.ID) }
 						hx-swap="outerHTML"
 						class={ smPri }
					>Contest</button>
				</div>
			} else {
				<div>
					{ f.Fine.Contest }
				</div>
			}
		</td>
		if isFineMaster {
			<td>
				<button
 					hx-get={ fmt.Sprintf("/fines/edit/%d?isEdit=true", f.Fine.ID) }
 					hx-target={ fmt.Sprintf("#fr-%d", f.Fine.ID) }
 					hx-swap="outerHTML"
 					hx-target-error="#any-errors"
 					class={ bigSec }
				>edit</button>
			</td>
		}
	</tr>
}

templ fineContextRow(f FineWithPlayer, matches []Match) {
	<div class="border rounded-lg flex flex-col items-center p-4 space-y-4">
		<p class="text-sm w-full text-gray-700">Add (optional) context for this fine:</p>
		<div class="w-full">
			<label>
				Context:
				<input
 					type="text"
 					name="context"
 					value={ f.Fine.Context }
 					class="px-4 py-2 border border-gray-300 rounded-lg w-full focus:ring-blue-500 focus:border-blue-500"
 					placeholder="Reason"
				/>
			</label>
		</div>
		<div class="mt-2">
			<div hx-get={ fmt.Sprintf("/match-list?type=select&matchId=%d", f.Fine.MatchId) } hx-trigger="load once"></div>
		</div>
		<div>OR</div>
		<div class="w-full">
			<label>
				Date/Time:
				<input
 					type="datetime-local"
 					id="fineAt"
 					name="fineAt"
 					value={ f.Fine.FineAt.Format("2006-01-02T15:04") }
 					class="px-2 py-1 border rounded w-full"
				/>
				<p class="italic text-md">(defaults to create time)</p>
			</label>
		</div>
		<input
 			type="hidden"
 			name="fid"
 			value={ fmt.Sprintf("%d", f.Fine.ID) }
		/>
		
		<button
 			class={ add }
 			hx-post={ "/fines/context" }
 			hx-swap="outerHTML"
 			hx-include="closest tr"
 			type="submit"
		>
			Save
		</button>
		<div class="w-full text-center">
			<a
 				href={ templ.SafeURL("/#fine-list-container") }
 				class={ sec }
			>
				Close
			</a>
		</div>
	</div>
}

templ fineContestRow(f FineWithPlayer) {
	<div class="border rounded-lg flex flex-col items-center p-4 space-y-4" id="contest-form">
		<p class="text-sm w-full text-gray-700">Contest fine:</p>
		<div class="w-full">
			<input
 				type="text"
 				name="contest"
 				value={ f.Fine.Contest }
 				class="px-4 py-2 border border-gray-300 rounded-lg w-full focus:ring-blue-500 focus:border-blue-500"
 				placeholder="Why do you contest this fine?"
			/>
		</div>
		<input
 			type="hidden"
 			name="fid"
 			value={ fmt.Sprintf("%d", f.Fine.ID) }
		/>
		<button
 			class={ add }
 			hx-post={ fmt.Sprintf("/fines/contest", ) }
 			hx-swap="outerHTML"
 			hx-include="closest #contest-form"
 			type="submit"
		>
			Save
		</button>
		<div class="w-full text-center">
			<a
 				href={ templ.SafeURL("/#fine-list-container") }
 				class={ sec }
			>
				Cancel
			</a>
		</div>
	</div>
}

templ fineEditRow(f FineWithPlayer) {
	<tr
 		id={ fmt.Sprintf("fr-%d", f.Fine.ID) }
 		class="bg-white divide-y divide-gray-200"
	>
		<td class="px-6 py-4">
			<label for="reason">Reason</label>
			<input
 				type="text"
 				name="reason"
 				value={ f.Fine.Reason }
 				class="px-2 py-1 border rounded w-full"
 				placeholder="Reason"
			/>
			<input
 				type="text"
 				name="context"
 				value={ f.Fine.Context }
 				class="px-2 py-1 border rounded w-full"
 				placeholder="Context"
			/>
			<input
 				type="playerId"
 				name="playerId"
 				value={ fmt.Sprintf("%v", f.Player.ID) }
 				class="invisible"
			/>
			<input
 				type="fid"
 				name="fid"
 				value={ fmt.Sprintf("%v", f.Fine.ID) }
 				class="invisible"
			/>
		</td>
		<td class="px-6 py-4">
			<input
 				type="number"
 				name="amount"
 				value={ fmt.Sprintf("%v", f.Fine.Amount) }
 				class="px-2 py-1 border rounded w-full"
 				placeholder="Amount"
			/>
		</td>
		<td>{ f.Player.Name }</td>
		<td>
			<select name="approved" class="px-2 py-1 border rounded">
				<option
 					value="true"
 					if f.Fine.Approved {
						selected
					}
				>Approved</option>
				<option
 					value="false"
 					if !f.Fine.Approved {
						selected
					}
				>Not Approved</option>
			</select>
		</td>
		<td>
			<input
 				type="date"
 				id="fineAt"
 				name="fineAt"
 				value={ f.Fine.FineAt.Format("2006-01-02") }
 				class="px-2 py-1 border rounded w-full"
			/>
		</td>
		<td>
			<button
 				class={ bigDel }
 				hx-confirm="Are you sure you want to delete the fine by this player?"
 				hx-delete={ fmt.Sprintf("/fines?fid=%d", f.Fine.ID) }
			>Delete</button>
			<button
 				class={ pri }
 				hx-post={ fmt.Sprintf("/fines/edit/%d", f.Fine.ID) }
 				hx-target={ fmt.Sprintf("#fr-%d", f.Fine.ID) }
 				hx-swap="outerHTML"
 				hx-include="closest tr"
 				type="submit"
			>
				Save
			</button>
			<button
 				hx-get={ fmt.Sprintf("/fines/edit/%d", f.Fine.ID) }
 				hx-target={ fmt.Sprintf("#fr-%d", f.Fine.ID) }
 				hx-swap="outerHTML"
 				type="button"
 				class={ sec }
			>
				Cancel
			</button>
		</td>
	</tr>
}

