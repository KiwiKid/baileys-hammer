package main

import (
"fmt"
	"time"
	"encoding/base64"
)

func getFinesTotal(fines []FineWithPlayer) float64 {
	if(len(fines) > 0){
		var total float64 = 0
		for _, f := range fines {
			total += f.Fine.Amount
		}
		return total
	}
	return 0
}


templ fineSummaryButton(title string, viewMode string){
	<div class="mt-10">
		switch viewMode {
			case "button": 
				<div class="flex-grow justify-center items-center mb-4">
					<div class={ bigPri } 
								hx-get={ "/fines/summary?viewMode=button" } 
								hx-trigger="click" 
								hx-swap="outerHTML"
						>{ title }
					</div>
				</div>
			case "summary":
				<div class="flex-grow justify-center items-center mb-4">
					<div class={ bigPri } 
								hx-get={ "/fines/summary" } 
								hx-trigger="click" 
								hx-swap="outerHTML"
						>{ title }
					</div>
				</div>
			default: 
				@warning(fmt.Sprintf("No view mode for %s", viewMode))
			
		}
	</div>
}

templ fineListButton(open bool){
	<div class="flex-grow justify-center items-center mb-4">
		<div class={ bigPri } 
					if open {
						hx-get="/fines" 
					 } else { 
						hx-get="/fines?viewMode=all-button"
					}
					hx-trigger="click" 
					hx-swap="outerHTML"
			>
			if !open {
				Close
			} else {
				Open	
			}
			Fine List
		</div>
	</div>
}

templ fineList(fines []FineWithPlayer, page int, presetFineUpdated uint, isFineMaster bool, onlyRecent bool) {
	<div class="m-2 bg-gray-200 shadow-xl p-2 mt-10" hx-target="this"
		if onlyRecent {
			id="recent-fine-list-container"
		} else {
			id="fine-list-container"
		}
	>
		<div class="text-center">
			<div class="flex-grow justify-center items-center mb-4">
				@fineListButton(false)
				<span class="flex-grow text-center font-bold"
					if !onlyRecent {
						hx-get="/fines"
						hx-target="#fine-list-container"
						hx-swap="outerHTML"
						hx-trigger="click"
					}
				>
					if onlyRecent {
						Recently Fined List
					} else {
						All Fine List 
					}
				</span>

				if !onlyRecent {
					<span class="text-3xl ml-2">↻</span>
				}
			</div>
			if isFineMaster {
				<div>{ fmt.Sprintf("$%v", getFinesTotal(fines)) }</div>
			}
			<table id="fine-list" class="min-w-full mb-36">
				<tbody class="divide-y divide-gray-900">
					for _, f := range fines {
						if !onlyRecent || f.Fine.FineAt.After(time.Now().Add(-5 * 24 * time.Hour)) {
							@fineRow(isFineMaster, f)
							if presetFineUpdated == f.Fine.ID {
								@success("updated!")
							}
						}
					}
				</tbody>
			</table>
		</div>
		
	</div>
}





templ bigFineImages(fineImages []FineImage, fineId uint){
	<div class="flex flex-wrap gap-4">
		for _, fi := range fineImages {
			<img class="h-64 w-64" src={ fmt.Sprintf("data:image/jpeg;base64,%s", base64.StdEncoding.EncodeToString(fi.Data)) } alt={ fi.Filename } />
		}
	</div>
}

templ fineImages(fineImages []FineImage, fineId uint, message string) {
	if len(message) > 0 {
		@warning(message)
	}
	<div class="flex flex-wrap gap-4">
		for _, fi := range fineImages {
			<div> 
				<img class="h-64 w-64" src={ fmt.Sprintf("data:image/jpeg;base64,%s", base64.StdEncoding.EncodeToString(fi.Data)) } alt={ fi.Filename } />
			</div>
		}
	</div>
}

templ fineRow(isFineMaster bool, f FineWithPlayer) {
	<tr
 		id={ fmt.Sprintf("fr-%d", f.Fine.ID) }
 		class="bg-gray-200 p-2"
	>
		<td class="p-2 text-gray-900 flex flex-col text-wrap">
			<div class="text-bold text-3xl">{ f.Player.Name }</div>
			<div class="text-2xl">
				{ f.Fine.Reason }
			</div>
			<div class="text-gray-900 text-wrap">
				{ f.Fine.Context }
				<div
 					if len(f.Fine.Context) > 0 {
						class="w-3/5"
					}
				></div>
			</div>
			<div class="italic">
				if f.Fine.Approved {
					{ fmt.Sprintf("$%v - ", f.Fine.Amount) }
				}
				if len(f.Match.Opponent) > 0 {
					{ f.Match.Opponent }
				}
				{ niceDate(&f.Fine.FineAt) }
			</div>
		</td>
		<td>
			<div class="m-2">
				<button
 					hx-get={ fmt.Sprintf("/fines/edit/%d?isContext=true", f.Fine.ID) }
 					hx-swap="outerHTML"
 					class={ smPri }
				>
					if len(f.Fine.Context) == 0 {
						Add Context	
						if f.Fine.MatchId == 0 {
							<span class="text-sm">
								⚠️
							</span>
						}
					} else {
						Edit Context
					}
				</button>
			</div>
			<div class="m-2">
				if len(f.Fine.Contest) == 0 {
					<div class="max-w-96">
						<button
 							hx-get={ fmt.Sprintf("/fines/edit/%d?isContest=true&isFineMaster=%t", f.Fine.ID, isFineMaster) }
 							hx-swap="outerHTML"
 							class={ smPri }
						>Contest</button>
					</div>
				} else {
					<div>
						{ f.Fine.Contest }
					</div>
				}
			</div>
		</td>
		<td>
			if isFineMaster {
				if !f.Fine.Approved {
					<form hx-post="/fines/approve" hx-swap="outerHTML" class="w-full" method="POST">
						<div class="grid grid-cols-2 gap-4">
							<!-- Corrected class name and added gap for spacing -->
							<div class="flex items-center">
								<!-- Added flex layout to vertically center align items -->
								<input
 									type="hidden"
 									name="fid"
 									value={ fmt.Sprintf("%d", f.Fine.ID) }
								/>
								<input
 									type="hidden"
 									name="approved"
 									value="on"
								/>
								<div class="mt-2">
									<label for="amount-input-3" class="block text-lg text-gray-700 text-lg font-semibold">Amount:</label>
									<div class="mt-1 flex rounded-md shadow-sm">
										<span class="inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-lg">$</span>
										<input
 											type="number"
 											name="amount"
 											id="amount-input-3"
 											class="flex-1 min-w-0 block w-full px-3 py-2 rounded-none rounded-r-md border border-gray-300"
 											placeholder="Set amount"
 											if f.Fine.Amount > 0 {
												value={ fmt.Sprintf("%v", f.Fine.Amount) }
											} else {
												value="2"
											}
										/>
									</div>
								</div>
							</div>
							<div class="flex justify-end items-center">
								<!-- Added flex layout to align button to the right and center it vertically -->
								<button
 									type="submit"
 									class={ bigAdd }
								>
									Approve
								</button>
							</div>
						</div>
					</form>
				} else {
					<div>
						<form hx-post="/fines/approve" hx-swap="outerHTML" ethod="POST">
							<input
 								type="hidden"
 								name="fid"
 								value={ fmt.Sprintf("%d", f.Fine.ID) }
							/>
							<input
 								type="hidden"
 								name="approved"
 								value="off"
							/>
							<input
 								type="hidden"
 								name="amount"
 								if f.Fine.Amount > 0 {
									value={ fmt.Sprintf("%v", f.Fine.Amount) }
								} else {
									value="2"
								}
							/>
							<button
 								type="submit"
 								class="text-3xl bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg hover:scale-105 transition transform ease-out duration-200"
							>
								Decline
							</button>
						</form>
					</div>
				}
			}
		</td>
		if isFineMaster {
			<td>
				<button
 					hx-get={ fmt.Sprintf("/fines/edit/%d?isEdit=true", f.Fine.ID) }
 					hx-target={ fmt.Sprintf("#fr-%d", f.Fine.ID) }
 					hx-swap="outerHTML"
 					hx-target-error="#any-errors"
 					class={ bigSec }
				>edit</button>
			</td>
		}
	</tr>
}

templ finesListButton(title string, toViewMode string, external bool){
	<div class="mt-10">
		switch toViewMode {
			case "sheet-button":
				if external {
					<a href={ templ.SafeURL(fmt.Sprintf("/fines?viewMode=%s", toViewMode)) } target="_">{ title }</a>
				} else {	
					<div class={ bigSec } 
						hx-get={ fmt.Sprintf("/fines?viewMode=%s", toViewMode) } 
						hx-trigger="click" 
						hx-swap="outerHTML" 
					>{ title }</div>
				}
			case "sheet":
				<div class={ bigPri } 
					if external {
						hx-get={ fmt.Sprintf("/fines?viewMode=%s", toViewMode) } 
						target="_"
					} else {
						hx-get={ fmt.Sprintf("/fines?viewMode=%s", toViewMode) } 
						hx-trigger="click" 
						hx-swap="outerHTML" 
					}
				>{ title }</div>
			case "summary":
				<div class={ bigSec } 
						if external {
							hx-get={ "/fines/summary" } 
							target="_"
						} else {
							hx-get={ "/fines/summary" } 
							hx-trigger="click" 
							hx-swap="outerHTML"
						}
					>{ title }
				</div>
			default:
				<div>@warning(fmt.Sprintf("fineListButton toViewMode not found - %s", toViewMode))</div>
		}
	</div>
}

templ fineTotals(totals []PlayerFinesTotal, grandTotal float64) {
	<div class="m-2 bg-white shadow p-4 mt-10" hx-target="this">
		@fineSummaryButton("Close Total View", "button")
		<h2 class="text-center font-bold text-lg mb-4">Fine Totals: { fmt.Sprintf("$%v", grandTotal)} </h2>
		<table class="min-w-full table-auto border-collapse">
			<thead>
				<tr class="bg-gray-100">
					<th class="p-2 border border-gray-300">Player</th>
					<th class="p-2 border border-gray-300">Fine Total</th>
					<th class="p-2 border border-gray-300">Fine Payments Total</th>
					<th class="p-2 border border-gray-300">Owing</th>
				</tr>
			</thead>
			<tbody class="divide-y divide-gray-200">
			<tr>{}
			</tr>
				for _, t := range totals {
					<tr>
						<td class="p-2 border border-gray-300">{ t.Player.Name }</td>
						<td class="p-2 border border-gray-300">{ fmt.Sprintf("$%v", t.TotalFines) }</td>
						<td class="p-2 border border-gray-300">{ fmt.Sprintf("$%v", t.TotalPayments) }</td>
						if (t.PaymentDifference > 0) {
							<td class="p-2 border border-gray-300 bg-red">@warning(fmt.Sprintf("$%v", t.PaymentDifference))</td>
						}else {
							<td class="p-2 border border-gray-300 bg-green">@success(fmt.Sprintf("$%v", t.PaymentDifference))</td>
						} 
						

					</tr>
				}
			</tbody>
		</table>
		@fineSummaryButton("Close Total View", "button")
	</div>
}

templ fineListSheet(teamId uint, fines []FineWithPlayer, standAlone bool, full bool) {
	<div class="m-2 bg-white shadow p-4 mt-10"  hx-target="this">
		if !standAlone {
			@finesListButton("Close Court Sheet", "sheet-button", false)
			<a class={bigPri} target="_" href="/court">Standalone</a>
		}
		@courtNotes(teamId)
		<h2 class="text-center font-bold text-lg mb-4">Fine Sheet View</h2>
		<div 
			if full {
				class="grid grid-cols-5 bg-gray-100 border border-gray-300"
			}else {
				class="grid grid-cols-3 bg-gray-100 border border-gray-300"
			}
			>
		
			<div class="border border-gray-300 p-2">Player</div>
			<div class="border border-gray-300 p-2">Fine Context</div>
			<div class="border border-gray-300 p-2">Court Notes</div>
			if full {
				<div class="border border-gray-300 p-2 col-span-2">Court Session Order</div>
			}
		</div>
		for _, f := range fines {
			<div 
			if full {
				class="grid grid-cols-5 border border-gray-300"
			}else {
				class="grid grid-cols-3 border border-gray-300"
			}
			>
			<div class="border border-gray-300 p-2">{ f.Player.Name } ({ fmt.Sprintf("$%v", f.Fine.Amount) })</div>
				<div class="border border-gray-300 p-2">{ f.Fine.Reason } - { f.Fine.Context } { f.Fine.FineAt.Format("Jan 2, 2006") } - { fmt.Sprintf("%s", f.Fine.Contest) } [					{ fmt.Sprintf("%s - %s ",  f.Match.Location, f.Match.Opponent ) }
] </div>
				<div class="border border-gray-300 p-2">{ fmt.Sprintf("%d %s", f.Fine.CourtSessionOrder, f.Fine.CourtSessionNote) }</div>

				if full {
					<div class="border col-span-2 border-gray-300 p-2">
						<form hx-post="/fines/court-display-order" hx-target="#court-note-result" class="max-w-md mx-auto bg-white p-6 rounded-lg shadow-md">
							<div class="mb-4">
								<input type="hidden" id="fid" name="fid" required value={ fmt.Sprintf("%v", f.Fine.ID) } class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"/>
							</div>
							<div class="mb-4">
								<label for="courtSessionOrder" class="block text-gray-700 font-medium mb-2">Court Session Order</label>
								<input type="number" id="courtSessionOrder" name="courtSessionOrder" value={ fmt.Sprint("%d", f.Fine.CourtSessionOrder) } required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"/>
							</div>
							<div class="mb-4">
								<label for="courtSessionNote" class="block text-gray-700 font-medium mb-2">Court Session Note</label>
								<input type="text" id="courtSessionNote" name="courtSessionNote" value={ f.Fine.CourtSessionNote } class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"/>
							</div>
							<button type="submit" class="w-full bg-blue-500 text-white py-2 rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
								Add Court Details
							</button>
						</form>
						<div id="court-note-result"></div>
						<details><summary>debug</summary>{ fmt.Sprintf("%+v", f)}</details>
					</div>
				}
			</div>
		}
	</div>
}


templ fineUploadForm(fineId uint) {
	<div>
		<form hx-post={ fmt.Sprintf("/fines/edit/%d/image?displayType=fineImage", fineId) } hx-encoding="multipart/form-data">
		Image:
			<input type="file" name="image"/>
			<button class={ bigSec} type="submit">Upload Image</button>
		</form>
	</div>
}

templ fineContextRow(f FineWithPlayer, matches []Match) {
	<td colspan="7">
		<div class="border rounded-lg flex flex-col items-center p-4 space-y-4 w-full mx-auto text-3xl">
			<div class="text-center w-full">{ f.Player.Name } - { fmt.Sprintf("$%v - ", f.Fine.Amount) } -  { f.Fine.Reason }</div>
			<p class=" w-full text-gray-700 text-sm">Add (optional) context for this fine:</p>
			<div class="w-full">
				<label class="block w-full text-lg font-semibold">
					Context:
					<input
 						type="text"
 						name="context"
 						value={ f.Fine.Context }
 						class="px-4 py-2 border border-gray-300 rounded-lg w-full focus:ring-blue-500 focus:border-blue-500"
 						placeholder="Context"
					/>
				</label>
				
			</div>
			<div class="mt-2">
				<div hx-get={ fmt.Sprintf("/match-list?type=select&matchId=%d", f.Fine.MatchId) } hx-trigger="load once"></div>
			</div>
			<!--<div>OR</div>
			<div class="w-full" id="dateInputDiv">
				<label class="block ">
					Date/Time:
					<input
 						type="datetime-local"
 						id="fineAt"
 						name="fineAt"
 						value={ f.Fine.FineAt.Format("2006-01-02T15:04") }
 						class="px-2 py-1 border rounded"
					/>
					<p class="italic text-md">(defaults to create time)</p>
				</label>
			</div>-->
			<input
 				type="hidden"
 				name="fid"
 				value={ fmt.Sprintf("%d", f.Fine.ID) }
			/>
			<button
 				class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
 				hx-post="/fines/context"
 				hx-swap="outerHTML"
 				hx-include="closest tr"
 				type="submit"
			>
				Save
			</button>
			<!--<div>
				@fineImagesAndForm(f.Fine.ID)
			</div>-->
			<div class="w-full text-center mt-4">
				<a
 					href={ templ.SafeURL("/#fine-list-container") }
 					class={ sec }
				>
					Close
				</a>
			</div>
		</div>
	</td>
}

templ fineContestRow(f FineWithPlayer) {
	<div class="border rounded-lg flex flex-col items-center p-4 space-y-4" id="contest-form">
		<p class="text-lg font-semibold w-full text-gray-700">Contest fine:</p>
		<div class="w-full">
			<input
 				type="text"
 				name="contest"
 				value={ f.Fine.Contest }
 				class="px-4 py-2 border border-gray-300 rounded-lg w-full focus:ring-blue-500 focus:border-blue-500"
 				placeholder="Why do you contest this fine?"
			/>
		</div>
		<input
 			type="hidden"
 			name="fid"
 			value={ fmt.Sprintf("%d", f.Fine.ID) }
		/>
		<button
 			class={ add }
 			hx-post={ fmt.Sprintf("/fines/contest", ) }
 			hx-swap="outerHTML"
 			hx-include="closest #contest-form"
 			type="submit"
		>
			Save
		</button>
		<div class="w-full text-center">
			<a
 				href={ templ.SafeURL("/#fine-list-container") }
 				class={ sec }
			>
				Cancel
			</a>
		</div>
	</div>
}

templ fineImagesAndForm(fineId uint){
	<div hx-get={ fmt.Sprintf("/fines/edit/%d/image?displayType=fineImage", fineId) } hx-trigger="revealed" >
		Images Loading...
	</div>
	@fineUploadForm(fineId)
}

templ fineEditForm(f FineWithPlayer, isFineMaster bool) {
	<form
 		hx-post={ fmt.Sprintf("/fines/edit/%d", f.Fine.ID) } 
 		hx-swap="innerHTML"
 		hx-target={ fmt.Sprintf("#fr-%d", f.Fine.ID) }
	>
		<h1 class="text-lg">Edit Fine</h1>
		<div class="p-4">
			<label for="reason" class="block text-lg font-semibold text-gray-700">Reason</label>
			<input
 				type="text"
 				name="reason"
 				value={ f.Fine.Reason }
 				class="mt-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 w-full"
 				placeholder="Reason"
			/>
			<label for="context" class="block mt-4 text-lg font-semibold text-gray-700">Context for the fine</label>
			<input
 				type="text"
 				name="context"
 				class="mt-1 px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 w-full"
 				value={ f.Fine.Context }
 				placeholder="Context for the fine"
			/>
			<div class="mt-2">
				<div hx-get={ fmt.Sprintf("/match-list?type=select&matchId=%d", f.Fine.MatchId) } hx-trigger="load once" hx-target="this"></div>
				if f.Fine.MatchId == 0 {
					<span class="text-sm">
						⚠️
					</span>
				}
			</div>
			@fineUploadForm(f.Fine.ID)
			<!-- Hidden Inputs -->
			<input
 				type="playerId"
 				name="playerId"
 				value={ fmt.Sprintf("%v", f.Player.ID) }
 				class="hidden"
			/>
			<input
 				type="fid"
 				name="fid"
 				value={ fmt.Sprintf("%v", f.Fine.ID) }
 				class="hidden"
			/>
			<input
 				type="amount"
 				name="amount"
 				value={ fmt.Sprintf("%v", f.Fine.Amount) }
 				class="hidden"
			/>
		</div>
		if isFineMaster {
			<div class="px-6 py-4">
				<input
 					type="number"
 					name="amount"
 					value={ fmt.Sprintf("%v", f.Fine.Amount) }
 					class="px-2 py-1 border rounded w-full"
 					placeholder="Amount"
				/>
			</div>
			<div>
				<select name="approved" class="px-2 py-1 border rounded">
					<option
 						value="true"
 						if f.Fine.Approved {
							selected
						}
					>Approved</option>
					<option
 						value="false"
 						if !f.Fine.Approved {
							selected
						}
					>Not Approved</option>
				</select>
			</div>
		}
		<div class="mt-10">
			<button
 				class={ bigPri }
 				type="submit"
			>
				Save
			</button>
		</div>
		<div class="mt-10 flex justify-between">
			<button
 				hx-get={ fmt.Sprintf("/fines/edit/%d", f.Fine.ID) }
 				hx-target={ fmt.Sprintf("#fr-%d", f.Fine.ID) }
 				hx-swap="outerHTML"
 				type="button"
 				class={ fmt.Sprintf("%s w-3/5", sec) }
			>
				Cancel
			</button>
			<button
 				class={ del }
 				hx-confirm="Are you sure you want to delete the fine by this player?"
 				hx-delete={ fmt.Sprintf("/fines?fid=%d", f.Fine.ID) }
			>Delete</button>
		</div>
		<pre>
			{ F(`
ineID: %d
PlayerID: %d
Name: %s
Reason: %s
Context: %s
Amount: %v
Contest: %s
FineAt: %s
PlayerID: %d
		`, 
	f.Fine.ID,
	f.Player.ID,
	f.Player.Name,
	f.Fine.Reason,
	f.Fine.Context,
	f.Fine.Amount,
	f.Fine.Contest,
	f.Fine.FineAt,
	f.Fine.PlayerID,
		 	) }
		</pre>
	</form>
}

templ fineEditRow(f FineWithPlayer, isFineMaster bool) {
	<tr
 		id={ fmt.Sprintf("fr-%d", f.Fine.ID) }
 		class="bg-white divide-y divide-gray-200"
 		hx-target="this"
 		hx-swap="innerHTML"
	>
		<td class="px-6 py-4" colspan="10">
			@fineEditForm(f, isFineMaster)
		</td>
	</tr>
}

templ fineEditDiv(f FineWithPlayer, isFineMaster bool) {
	<div
 		id={ fmt.Sprintf("fr-%d", f.Fine.ID) }
 		class="bg-white divide-y divide-gray-200"
 		hx-target="this"
 		hx-swap="innerHTML"
	>
		<td class="px-6 py-4" colspan="10">
			@fineEditForm(f, isFineMaster)
		</td>
	</div>
}

