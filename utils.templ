package main

import (
	"fmt"
	"time"
	"github.com/dustin/go-humanize"
)

templ tomSelectLinks() {
	<link href="https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/css/tom-select.css" rel="stylesheet"/>
	<script src="https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/js/tom-select.complete.min.js"></script>
	<script src="https://cdn.jsdelivr.net/gh/KiwiKid/hx-tomselect/hx-tomselect.js"></script>
	<!--<script>
	(function() {   
    /** stable build*/
    const version = '06'

    /**
     * @typedef {Object} SupportedAttribute
     * Defines an attribute supported by a configuration modification system.
     * @property {string} key - The key of the configuration attribute to modify.
     * @property {ConfigChange} configChange - The modifications to apply to the TomSelect configuration.
     */

    /**
     * @typedef {'simple' | 'callback'} AttributeType
     */

      /**
     * @typedef {function(HTMLElement, Object):void} CallbackFunction
     * Description of what the callback does and its parameters.
     * @param {string} a - The first number parameter.
     
     */
      /**
     * @typedef {Object} AttributeConfig
     * Defines an attribute supported by a configuration modification system.
     * @property {string} key - The key of the configuration attribute to modify.
     * @property {string} _description
     * @property {ConfidenceLevel} _isBeta
     * @property {CallbackFunction|string|null} configChange - The modifications to apply to the TomSelect configuration.
     * 
     */



    /**
     * @type {SupportedAttribute[]}
     */

    /**
     * @typedef {'ts-max-items' | 'ts-max-options' | 'ts-create' | 'ts-sort' | 'ts-sort-direction' | 'ts-allow-empty-option', 'ts-clear-after-add', 'ts-raw-config', 'ts-create-on-blur', 'ts-no-delete'} TomSelectConfigKey
     * Defines the valid keys for configuration options in TomSelect.
     * Each key is a string literal corresponding to a specific property that can be configured in TomSelect.
     */

    /**
     * @type {Array<AttributeConfig>}
     */
    const attributeConfigs = [
        {
            key: 'ts-create',
            configChange: 'create',
            _description: 'Allow creating new items'
        },{
            key: 'ts-create-on-blur',
            configChange: 'createOnBlur'
        },{
            key: 'ts-create-filter',
            configChange:  (elm, config) => ({
                createFilter: function(input) {
                    try {
                        const filter = elm.getAttribute('ts-create-filter')
                        const matchEx = filter == "true" ? /^[^,]*$/ : elm.getAttribute('ts-create-filter')
                        var match = input.match(matchEx); // Example filter: disallow commas in input
                        if(match) return !this.options.hasOwnProperty(input);
                        elm.setAttribute('tom-select-warning', JSON.stringify(err));
                        return false;
                    } catch (err) {
                        return false
                    }
                }
            })
        },{
            key: 'ts-delimiter',
            configChange: 'delimiter'
        },{
            key: 'ts-highlight',
            configChange: 'highlight'
        },{
            key: 'ts-multiple',
            configChange: 'multiple'
        },{
            key: 'ts-persist',
            configChange: 'persist'
        },{
            key: 'ts-open-on-focus',
            configChange: 'openOnFocus'
        },{
            key: 'ts-max-items',
            configChange: 'maxItems'
        },{
            key: 'ts-hide-selected',
            configChange: 'hideSelected'
        },{
            key: 'tx-close-after-select',
            configChange: 'closeAfterSelect'
        },{
            key: 'tx-duplicates',
            configChange: 'duplicates'
        },
        {
            key: 'ts-max-options',
            configChange: 'maxOptions'
        },{
            key: 'ts-sort',
            configChange: (elm, config) => ({
                sortField: {
                    field: elm.getAttribute('ts-sort'),
                },
            })
        },{
            key: 'ts-sort-direction',
            configChange: (elm, config) => ({
                sortField: {
                    direction: elm.getAttribute('ts-sort-direction') ?? 'asc'
                },
            })
        },{
            key: 'ts-allow-empty-option',
            type: 'simple',
            configChange: 'allowEmptyOption'
        },{
            key: 'ts-clear-after-add',
            configChange: {
                create: true,
                onItemAdd: function() {
					debugger
                    this.setTextboxValue('');
               //     this.refreshOptions();
                }
            }
        },{
            key: 'ts-remove-button-title',
            configChange: (elm, config) => deepAssign(config,{
                plugins: {
                    remove_button: {
                        title: elm.getAttribute('ts-remove-button-title') == 'true' ? 'Remove this item' : elm.getAttribute('ts-remove-button-title')
                    }
                },
            })
        },{
            key: 'ts-delete-confirm',
            configChange: (elm, config) => ({
                onDelete: function(values) {
                    if(elm.getAttribute('ts-delete-confirm') == "true"){
                        return confirm(values.length > 1 ? 'Are you sure you want to remove these ' + values.length + ' items?' : 'Are you sure you want to remove "' + values[0] + '"?');
                    }else {
                        return confirm(elm.getAttribute('ts-delete-confirm'));
                    }
                    
                }
            })
        },{
            key: 'ts-add-post-url',
            configChange: (elm, config) => ({
                    onOptionAdd: function(value, item) {
                        this.lock();
                        const valueKeyName = elm.getAttribute('ts-add-post-url-body-value') ?? 'value'
                        const body = {}
                        body[valueKeyName] = value
                        fetch(elm.getAttribute('ts-add-post-url'), {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(body),
                        })
						.then((res) => {
							if (!res.ok) {
								throw new Error(`HTTP status ${res.status}`); // Throw an error if response is not ok.
							}
							return res.text(); // Return the response as text for HTMX processing.
						})
                        .then((responseHtml) => htmx.process(elm, responseHtml))
                        .catch(error => {
                            console.error('Error adding item', error)
                            elm.setAttribute('tom-select-warning', `ts-add-post-url - Error processing item: ${JSON.stringify(error)}`);
                            this.removeItem(value);
                        })
                        .finally(() => {
                            this.unlock();
                        });
                }
            }),
            _isBeta: true,
        },{
            key: 'ts-add-post-url-body-value',
            configChange: '',
            _isBeta: true,
        },
        {
            key: 'ts-no-active',
            configChange: {
                plugins: ['no_active_items'],
                persist: false,
                create: true
            }
        },{
            key: 'ts-remove-selector-on-select',
            type: 'simple',
            configChange: null
        },{
            key: 'ts-no-delete',
            configChange: {
                onDelete: () => { return false},
            }
        },{
            key: 'ts-option-class',
            configChange: 'optionClass'
        },{
            key: 'ts-option-class-ext',
            configChange: (elm, config) => ({
                'optionClass': `${elm.getAttribute('ts-option-class-ext')} option`
            })
        },{
            key: 'ts-item-class',
            configChange: 'itemClass'
        },{
            key: 'ts-item-class-ext',
            configChange:(elm, config) => ({
                key: 'ts-option-class-ext',
                configChange: {
                    'itemClass': `${elm.getAttribute('ts-option-class-ext')} item`
                }
            })
        },
        {
            key: 'ts-raw-config',
            configChange: (elm, config) => elm.getAttribute('ts-raw-config')
        }
    ]

    /**
     * Deeply assigns properties to an object, merging any existing nested properties.
     * 
     * @param {Object} target The target object to which properties will be assigned.
     * @param {Object} updates The updates to apply. This object can contain deeply nested properties.
     * @returns {Object} The updated target object.
     */
    function deepAssign(target, updates) {
        Object.keys(updates).forEach(key => {
            if (typeof updates[key] === 'object' && updates[key] !== null && !Array.isArray(updates[key])) {
                if (!target[key]) target[key] = {};
                deepAssign(target[key], updates[key]);
            } else {
                target[key] = updates[key];
            }
        });
        return target;
    }

    function attachTomSelect(s){
        try {
            if(s.attributes?.length == 0){
                throw new Error("no attributes on select?")
            }
            
            let config = {
                maxItems: 999,
                plugins: {}
            };
            const debug = s.getAttribute('hx-ext')?.split(',').map(item => item.trim()).includes('debug');
            if (debug) { console.log(s.attributes) }

            Array.from(s.attributes).forEach((a) => {
                const attributeConfig = attributeConfigs.find((ac) => ac.key == a.name)
                if (attributeConfig != null){
                    let configChange = {}
                    if(typeof attributeConfig.configChange == 'string'){
                        configChange[attributeConfig.configChange] = a.value
                    }else if(typeof attributeConfig.configChange == 'function'){
                        configChange = attributeConfig.configChange(s, config)
                    }else if(typeof attributeConfig.configChange == 'object'){
                        configChange = attributeConfig.configChange
                    }else if(a.name.startsWith('ts-')) {
                        s.setAttribute('tom-select-warning', `Invalid config key found: ${attr.name}`);
                        console.warn(`Could not find config match:${JSON.stringify(attributeConfig)}`)
                    }
                
                    deepAssign(config, configChange)
                }else if(a.name.startsWith('ts-')){
                    console.warn(`Invalid config key found: ${a.name}`);
                    s.setAttribute(`tom-select-warning_${a.name}`, `Invalid config key found`);
                }
            })

        if (debug) {  console.info('hx-tomselect - tom-select-success - config', config) }
        const ts = new TomSelect(s, config);
        s.setAttribute('tom-select-success', `success`);
        s.setAttribute('hx-tom-select-version', `hx-ts-${version}_ts-${ts.version}`);

    } catch (err) {
        s.setAttribute('tom-select-error', JSON.stringify(err));
        console.error(`htmx-tomselect - Failed to load hx-tomsselect ${err}`);
    }
    }

    htmx.defineExtension('tomselect', {
        // This is doing all the tom-select attachment at this stage, but relies on this full document scan (would prefer onLoad of speicfic content):
        onEvent: function (name, evt) {
            if (name === "htmx:afterProcessNode") {
                const newSelects = document.querySelectorAll('select[hx-ext*="tomselect"]:not([tom-select-success]):not([tom-select-error])')
                newSelects.forEach((s) => {
                    attachTomSelect(s)
                })
            }
        },
        onLoad: function (content) {
            console.log('onLoad')
                    const newSelects = content.querySelectorAll('select[hx-ext*="tomselect"]:not([tom-select-success]):not([tom-select-error])')
                    newSelects.forEach((s) => {
                        attachTomSelect(s)
                    })

            // When the DOM changes, this block ensures TomSelect will reflect the current html state (i.e. new <option selected></option> will be respected)
            // Still evaulating the need of this
             /*   const selectors = document.querySelectorAll('select[hx-ext*="tomselect"]')
            selectors.forEach((s) => {
                console.log('SYNC RAN')
                s.tomselect.clear();
                s.tomselect.clearOptions();
                s.tomselect.sync(); 
            })*/
        },
		beforeHistorySave: function(){
			document.querySelectorAll('select[hx-ext*="tomselect"]')
            	.forEach(elt => elt.tomselect.destroy())
		}
    });

})();
	</script>-->
}

func getIdStr(id string) string {
	return fmt.Sprintf("#%s", id)
}

templ contextSuccess(matchId uint64, contextStr string, fineAt *time.Time) {
	@successComp() {
		<h1>Added Context</h1>
		<div>{ fmt.Sprintf("%d", matchId) }</div>
		<div>{ contextStr }</div>
		<div>
			if fineAt != nil {
				if fineAt.After(twoWeeksAgo) {
					{ humanize.Time(*fineAt) }
				} else {
					{ fineAt.Format("2006-01-02T15:04") }
				}
			}
		</div>
	}
}

templ successComp() {
	<div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-lg">
		<p class="text-lg font-semibold">{ children... }</p>
	</div>
}

templ success(msg string) {
	if len(msg) > 0 {
		<div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-lg">
			<p class="text-lg font-semibold">{ msg }</p>
		</div>
	}
}

templ warning(msg string) {
	if len(msg) > 0 {
		<div class="p-4 mb-4 text-blue-800 border border-blue-300 rounded-lg bg-blue-50 dark:bg-gray-800 dark:text-blue-400 dark:border-blue-800">
			<p class="text-lg font-semibold">{ msg }</p>
		</div>
	}
}

templ errMsg(msg string) {
	<div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-lg">
		<p class="text-lg font-semibold">{ msg }</p>
	</div>
}

func niceDate(date *time.Time) string {
    return date.Format("January 2, 2006")
}

func isSelected(selectedIds []uint, id uint) bool {
	for _, sid := range selectedIds {
		if sid == id {
			return true
		}
	}
	return false
}

templ fineSuperSelect(players []PlayerWithFines, approvedPFines []PresetFine, selectedFineIds []uint, instance string) {
	<div class="w-full mx-auto bg-gray-200 shadow-xl m-10" id={ F("fine-ss-%s", instance) } hx-get="/fines/add" hx-trigger="pageLoaded" hx-target={ F("#fine-ss-%s", instance) }>
		<form id="ss-form" hx-post="/fines-multi" method="POST" class="flex flex-col space-y-4 bg-white shadow-md p-6 rounded-lg">
			<p class="font-bold text-3xl">Fines</p>
			<div class="flex flex-row">
				<select
 					id="select-fine"
 					hx-ext="tomselect"
 					ts-persist="false"
 					ts-create="true"
 					ts-create-filter="true"
 					ts-create-on-blur="true"
 					ts-clear-after-add="true"
 					ts-open-on-focus="true"
 					ts-add-post-url="/fines/add"
 					ts-add-post-url-body-value="reason"
 					tx-close-after-select="true"
 					ts-item-class="text-3xl py-3"
 					ts-option-class="text-3xl w-full py-3"
 					tx-max-items="99"
 					name="pfines[]"
 					multiple
 					required
 					placeholder="Caused Own Goal"
 					class="text-3xl border border-gray-300 rounded-md text-gray-700 flex-grow mb-2"
				>
					<option value="">Select a fine...</option>
					for _, apf := range approvedPFines {
						if isSelected(selectedFineIds, apf.ID) {
							<option selected value={ fmt.Sprintf("%d", apf.ID) }>{ apf.Reason }</option>
						} else {
							<option value={ fmt.Sprintf("%d", apf.ID) }>{ apf.Reason }</option>
						}
					}
				</select>
			</div>
			<div class="flex flex-row">
				<select
 					id="select-player"
 					required
 					hx-ext="tomselect"
 					tx-max-items="99"
 					name="players[]"
 					ts-item-class="text-3xl py-3"
 					tx-close-after-select="true"
 					ts-option-class="text-3xl w-full py-3"
 					multiple
 					placeholder="John Doe"
 					class="text-3xl  border border-gray-300 rounded-md text-gray-700 flex-grow mb-2"
				>
					<option value="">Select a player...</option>
					for _, p := range players {
						<option value={ fmt.Sprintf("%d", p.ID) }>{ p.Name }</option>
					}
				</select>
			</div>
			<div class="flex flex-row">
				<input
 					type="text"
 					name="context"
 					value=""
 					class="px-4 py-2 border border-gray-300 rounded-lg w-full focus:ring-blue-500 focus:border-blue-500"
 					placeholder="John fell over causing an own-goal"
				/>
			</div>
			<button type="submit" class={ bigAdd }>Create Fine(s)</button>
			<div id="results-container"></div>
		</form>
	</div>
}

func getFineIds(fines []Fine) []uint {
	var ids = []uint{}
	for _, f := range fines {
		ids = append(ids, f.ID)
	}
	return ids
}

templ fineSuperSelectResults(players []PlayerWithFines, approvedPFines[]PresetFine, newFines []Fine) {
	@fineSuperSelect(players, approvedPFines, getFineIds(newFines), "1")
	if len(newFines) > 0 {
		<div class="text-2xl list-none bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-lg">
			<h1 class="text-3xl">{ fmt.Sprintf("Added %d Fines:", len(newFines)) }</h1>
			if len(newFines) > 0 {
				for _, p := range players {
					for _, nf := range newFines {
						if p.ID == nf.PlayerID {
							<details>
								<summary>
									{ fmt.Sprintf("%s - %s - %s",nf.Reason, p.Name, nf.Context) }
								</summary>
								{ fmt.Sprintf("%+v",nf) }
							</details>
							<button
 								hx-get={ fmt.Sprintf("/fines/edit/%d?isEdit=form", nf.ID) }
 								hx-swap="outerHTML"
 								hx-target="this"
 								class={ smPri }
							>
								if len(nf.Context) == 0 {
									Add Context	
								} else {
									Edit Context
								}
							</button>
							<button
 								class={ del }
 								hx-confirm="Are you sure you want to delete the fine by this player?"
 								hx-delete={ fmt.Sprintf("/fines?fid=%d", nf.ID) }
 								hx-swap="outerHTML"
 								hx-target="this"
							>Undo</button>
						}
					}
				}
			} else {
				<div>No fines created? { fmt.Sprintf("%d %d", len(approvedPFines)) }</div>
			}
		</div>
	} else {
		<div class="bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4" role="alert">
			<p>no fines added? Make sure to select fines/players above</p>
		</div>
	}
}

