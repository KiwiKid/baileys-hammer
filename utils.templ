package main

import (
	"fmt"
	"time"
	"github.com/dustin/go-humanize"
)

templ tomSelectLinks() {
	<link href="https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/css/tom-select.css" rel="stylesheet"/>
	<script src="https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/js/tom-select.complete.min.js"></script>
}

templ tomSelectConfig() {
	/*
	<script hx-swap-oob="true" id="player-select-config">
		new TomSelect("#player-select-potd", {
			maxOptions: 20,
			plugins: {
				remove_button:{
					title:'Remove this player'
				}
			},
			onItemAdd:function(){
				this.setTextboxValue('');
				this.refreshOptions();
			}
		});
		new TomSelect("#player-select-dud-of-day", {
				maxOptions: 20,
				plugins: {
					remove_button:{
						title:'Remove this player'
					}
				},
				onItemAdd:function(){
					this.setTextboxValue('');
					this.refreshOptions();
				}
		});
	
	
	</script>
	*/
}

func getIdStr(id string) string {
	return fmt.Sprintf("#%s", id)
}

templ contextSuccess(matchId uint64, contextStr string, fineAt time.Time) {
	@successComp() {
		<h1>Added Context</h1>
		<div>{ fmt.Sprintf("%d", matchId) }</div>
		<div>{ contextStr }</div>
		<div>
			if fineAt.After(twoWeeksAgo) {
				{ humanize.Time(fineAt) }
			} else {
				{ fineAt.Format("2006-01-02T15:04") }
			}
		</div>
	}
}

templ successComp() {
	<div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-lg">
		<p class="text-lg font-semibold">{ children... }</p>
	</div>
}

templ success(msg string) {
	if len(msg) > 0 {
		<div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-lg">
			<p class="text-lg font-semibold">{ msg }</p>
		</div>
	}
}

templ errMsg(msg string) {
	<div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-lg">
		<p class="text-lg font-semibold">{ msg }</p>
	</div>
}

func niceDate(date *time.Time) string {
    return date.Format("January 2, 2006")
}

templ fineSuperSelect(players []PlayerWithFines, approvedPFines []PresetFine) {
	<div class="container mx-auto bg-gray-200 shadow-xl m-10" id="fine-ss" hx-get="/fines/add" hx-trigger="pageLoaded" hx-target="#fine-ss">
		<form id="ss-form" hx-post="/fines-multi" method="POST" class="flex flex-col space-y-4 bg-white shadow-md p-6 rounded-lg">
			<p class="font-bold">Select players and fines:</p>
			<div class="flex flex-row">
				<label for="select-fine" class="mt-2 pr-2 font-semibold text-gray-700">Fines</label>
				<select id="select-fine" name="pfines[]" multiple placeholder="Select fine(s)..." class="border border-gray-300 rounded-md text-gray-700 flex-grow mb-2">
					<option value="">Select a fine...</option>
					for _, apf := range approvedPFines {
						<option value={ fmt.Sprintf("%d", apf.ID) }>{ apf.Reason }</option>
					}
				</select>
			</div>
			<div clas="flex flex-row">
				<label for="select-player" class="mt-2 pr-2 font-semibold text-gray-700">Players</label>
				<select
 					id="select-player"
 					hx-ext="tomselect"
 					max-opt
 					i
 					remove-
 					b
 					name="players[]"
 					multiple
 					placeholder="Select player(s)..."
 					class="border border-gray-300 rounded-md text-gray-700 flex-grow mb-2"
				>
					<option value="">Select a player...</option>
					for _, p := range players {
						<option value={ fmt.Sprintf("%d", p.ID) }>{ p.Name }</option>
					}
				</select>
			</div>
			<button type="submit" class={ bigAdd }>Create Fine(s)</button>
			<div id="results-container"></div>
			<script>
			var settings = {};
			new TomSelect("#select-fine",{
				maxOptions: 20,
				create: true,
				persist: false,
				plugins: {
					no_active_items: 'true',
					remove_button: {
						title:'Remove this fine',
					}
				},
				createFilter: function(input) {
					var match = input.match(/^[^,]*$/); // Example filter: disallow commas in input
					if(match) return !this.options.hasOwnProperty(input);
					return false;
				},
				onItemAdd:function(){
					this.setTextboxValue('');
					this.refreshOptions();
				},
				onOptionAdd: function(value, item) {
					this.lock();
					fetch('/fines/add', { // Replace with your actual endpoint URL
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify({ reason: value }),
					})
					.then(response => {
						if (response.ok) {
							htmx.trigger("#ss-form", "pageLoaded")
							htmx.process(response.body)
							return response.json();
							
						} else {
							throw new Error('Server responded with an error');
						}
					})
					.then(data => {
						console.log(data.message); // Log the success message
						// The item is already added to the select; you might want to do something else here
					})
					.catch(error => {
						console.error('Error adding fine:', error);
						this.removeItem(value); // Remove the item if the server request failed
					})
					.finally(() => {
						this.unlock(); // Re-enable the select
					});
				},
			});
			/*new TomSelect("#select-player", {
				maxOptions: 20,
				plugins: {
					remove_button:{
						title:'Remove this player'
					}
				},
				onItemAdd:function(){
					this.setTextboxValue('');
					this.refreshOptions();
				}
			});*/
			</script>
		</form>
	</div>
}

templ fineSuperSelectResults(players []PlayerWithFines, approvedPFines[]PresetFine, newFines []Fine) {
	@fineSuperSelect(players, approvedPFines)
	if len(newFines) > 0 {
		<details class="list-none">
			<summary class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-lg">
				{ fmt.Sprintf("Added %d Fines", len(newFines)) }
			</summary>
			if len(newFines) > 0 {
				for _, nf := range newFines {
					<div>{ fmt.Sprintf("%d %s",nf.PlayerID,  nf.Reason  ) }</div>
				}
			} else {
				<div>No fines created? { fmt.Sprintf("%d %d", len(approvedPFines)) }</div>
			}
		</details>
	} else {
		<div class="bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4" role="alert">
			<p>o fines added? Make sure to select fines/players above</p>
		</div>
	}
}

