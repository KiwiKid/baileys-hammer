package main

import (
	"fmt"
	"time"
	"github.com/dustin/go-humanize"
)

templ headLinks(){
	<script src="https://unpkg.com/htmx.org"></script>
	<link href="https://unpkg.com/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet"/>
    <link href="https://cdn.jsdelivr.net/npm/tom-select@latest/dist/css/tom-select.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/tom-select@latest/dist/js/tom-select.complete.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/hx-tomselect@1.0.5/hx-tomselect.js"></script>
	<script src="https://unpkg.com/hyperscript.org@0.9.12"></script>


	<link
      rel="stylesheet"
      href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
      integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI="
      crossorigin=""
    />
    <script
      src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"
      integrity="sha256-WBkoXOwTeyKclOHuWtc+i2uENFpDZ9YPdf5Hf+D7ewM="
      crossorigin=""
    ></script>
 	<script src="https://unpkg.com/hyperleaflet@0.4.4"></script>
}


func getIdStr(id string) string {
	return fmt.Sprintf("#%s", id)
}

templ contextSuccess(matchId uint64, contextStr string, fineAt *time.Time) {
	@successComp() {
		<h1>Added Context</h1>
		<div>{ fmt.Sprintf("%d", matchId) }</div>
		<div>{ contextStr }</div>
		<div>
			if fineAt != nil {
				if fineAt.After(twoWeeksAgo) {
					{ humanize.Time(*fineAt) }
				} else {
					{ fineAt.Format("2006-01-02T15:04") }
				}
			}
		</div>
	}
}

templ successComp() {
	<div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-lg">
		<p class="text-lg font-semibold">{ children... }</p>
	</div>
}

templ success(msg string) {
	if len(msg) > 0 {
		<div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-lg">
			<p class="text-lg font-semibold">{ msg }</p>
		</div>
	}
}

templ warning(msg string) {
	if len(msg) > 0 {
		<div class="p-4 mb-4 text-blue-800 border border-blue-300 rounded-lg bg-blue-50 dark:bg-gray-800 dark:text-blue-400 dark:border-blue-800">
			<p class="text-lg font-semibold">{ msg }</p>
		</div>
	}
}

templ errMsg(msg string) {
	<div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-lg">
		<p class="text-lg font-semibold">{ msg }</p>
	</div>
}

func niceDate(date *time.Time) string {
    return date.Format("January 2, 2006")
}

func isSelected(selectedIds []uint, id uint) bool {
	for _, sid := range selectedIds {
		if sid == id {
			return true
		}
	}
	return false
}

templ fineSuperSelect(players []PlayerWithFines, approvedPFines []PresetFine, selectedFineIds []uint, instance string) {
	<div class="w-full mx-auto bg-gray-200 shadow-xl m-10" id={ F("fine-ss-%s", instance) } hx-get="/fines/add" hx-trigger="pageLoaded" hx-target={ F("#fine-ss-%s", instance) }>
		<form id="ss-form" hx-post="/fines-multi" method="POST" class="flex flex-col space-y-4 bg-white shadow-md p-6 rounded-lg">
			<p class="font-bold text-3xl">Fine a player</p>
			<div class="flex flex-row">
				<select
 					id="select-fine"
 					hx-ext="tomselect"
 					ts-persist="false"
 					ts-create="true"
 					ts-create-filter="true"
 					ts-create-on-blur="true"
 					ts-clear-after-add="true"
 					ts-open-on-focus="true"
 					ts-add-post-url="/fines/add"
 					ts-add-post-url-body-value="reason"
 					tx-close-after-select="true"
 					ts-item-class="text-5xl	py-5"
 					ts-option-class="text-5xl w-full py-5"
 					tx-max-options="99"
                    hx-debug="true"
 					name="pfines[]"
 					multiple
 					required
 					placeholder="Caused Own Goal"
 					class="border border-gray-300 rounded-md text-gray-700 flex-grow mb-2"
				>
					<option value="">Select a fine...</option>
					for _, apf := range approvedPFines {
						if isSelected(selectedFineIds, apf.ID) {
							<option selected value={ fmt.Sprintf("%d", apf.ID) }>{ apf.Reason }</option>
						} else {
							<option value={ fmt.Sprintf("%d", apf.ID) }>{ apf.Reason }</option>
						}
					}
				</select>
			</div>
			<div class="flex flex-row">
				<select
 					id="select-player"
 					required
 					hx-ext="tomselect"
 					tx-max-items="99"
 					name="players[]"
 					tx-close-after-select="true"
 					ts-item-class="text-5xl	py-5"
 					ts-option-class="text-5xl w-full py-5"
                    hx-debug="true"
 					multiple
 					placeholder="John Doe"
 					class="text-3xl  border border-gray-300 rounded-md text-gray-700 flex-grow mb-2"
				>
					<option value="">Select a player...</option>
					for _, p := range players {
						<option value={ fmt.Sprintf("%d", p.ID) }>{ p.Name }</option>
					}
				</select>
			</div>
			<div class="flex flex-row">
				<input
 					type="text"
 					name="context"
 					value=""
 					class="px-4 py-2 border border-gray-300 rounded-lg w-full focus:ring-blue-500 focus:border-blue-500"
 					placeholder="John fell over causing an own-goal"
				/>
			</div>
			<button type="submit" class={ bigAdd }>Create Fine(s)</button>
			<div id="results-container"></div>
		</form>
	</div>
}

func getFineIds(fines []Fine) []uint {
	var ids = []uint{}
	for _, f := range fines {
		ids = append(ids, f.ID)
	}
	return ids
}

templ fineSuperSelectResults(players []PlayerWithFines, approvedPFines []PresetFine, newFines []Fine, warnStr string) {
	@fineSuperSelect(players, approvedPFines, getFineIds(newFines), "1")
	if len(newFines) > 0 {
		<div class="text-2xl list-none bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-lg">
			<h1 class="text-3xl">{ fmt.Sprintf("Added %d Fines:", len(newFines)) }</h1>
			if len(warnStr) > 0 {
				@warning(warnStr)
			}
			if len(newFines) > 0 {
				for _, p := range players {
					for _, nf := range newFines {
						if p.ID == nf.PlayerID {
							<details>
								<summary>
									{ fmt.Sprintf("%s - %s - %s",nf.Reason, p.Name, nf.Context) }
								</summary>
								{ fmt.Sprintf("%+v",nf) }
							</details>
							<button
 								hx-get={ fmt.Sprintf("/fines/edit/%d?isEdit=fineEditDiv", nf.ID) }
 								hx-swap="outerHTML"
 								hx-target="this"
 								class={ smPri }
							>
								if len(nf.Context) == 0 {
									Add Context	
								} else {
									Edit Context
								}
							</button>
							<button
 								class={ del }
 								hx-confirm="Are you sure you want to delete the fine by this player?"
 								hx-delete={ fmt.Sprintf("/fines?fid=%d", nf.ID) }
 								hx-swap="outerHTML"
 								hx-target="this"
							>Undo</button>
						}
					}
				}
			} else {
				<div>No fines created? { fmt.Sprintf("%d", len(approvedPFines)) }</div>
			}
		</div>
	} else {
		<div class="bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4" role="alert">
			<p>no fines added? Make sure to select fines/players above</p>
		</div>
	}
}

