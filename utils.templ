package main

import (
	"fmt"
	"time"
	"github.com/dustin/go-humanize"
)

templ tomSelectLinks() {
	<link href="https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/css/tom-select.css" rel="stylesheet"/>
	<script src="https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/js/tom-select.complete.min.js"></script>
	<script src="https://kiwikid.github.io/hx-tomselect/hx-tom-select.js"></script>
	<!--<script>
			console.log('tom-select-init-v2')
			console.log('Defining htmx extension 2222');
			htmx.defineExtension('tomselect', {
				onEvent: function (name, evt) {
					if (name === "htmx:afterProcessNode") {
						try {
							var elt = evt.detail.elt;
							const selects = document.querySelectorAll('select[hx-ext="tomselect"]:not([tom-select-success]):not([tom-select-error])')
							console.log('processing!'+selects.length)
							selects.forEach((s) => {
								let config = {
									maxOptions: s.getAttribute('max-options') || 100,
									plugins: {}
								};

							// Additional configuration based on attributes
							if (s.hasAttribute('remove-button-title')) {
								config.plugins.remove_button = {
									title: s.getAttribute('remove-button-title'),
									plugins: {
										remove_button: {
											title: 'Remove this'
										}
									}
								};
							}

							if (s.hasAttribute('clear-after-item-add')) {
								const clearAfterItemAddConfig = {
									onItemAdd: function() {
										this.setTextboxValue('');
										this.refreshOptions();
									}
								}
								config = {...config, ...clearAfterItemAddConfig};
							}

							if (s.hasAttribute('raw-config')) {
								let rawConfig = JSON.parse(element.getAttribute('raw-config'));
								config = {...config, ...rawConfig};
							}

							console.log('htmx-tomselect - v1 -  New TomSelect() config', config);

							new TomSelect(s, config);
							s.setAttribute('tom-select-success', "true");

							})

						} catch (err) {
							s.setAttribute('tom-select-error', JSON.stringify(err));
							console.error(`htmx-tomselect - Failed to load hx-tomsselect ${err}`);
						}
					}
				}
			});

			console.log('htmx extension defined');

			
		</script>-->
}

templ tomSelectConfig() {
	/*
	<script hx-swap-oob="true" id="player-select-config">
		new TomSelect("#player-select-potd", {
			maxOptions: 20,
			plugins: {
				remove_button:{
					title:'Remove this player'
				}
			},
			onItemAdd:function(){
				this.setTextboxValue('');
				this.refreshOptions();
			}
		});
		new TomSelect("#player-select-dud-of-day", {
				maxOptions: 20,
				plugins: {
					remove_button:{
						title:'Remove this player'
					}
				},
				onItemAdd:function(){
					this.setTextboxValue('');
					this.refreshOptions();
				}
		});
	
	
	</script>
	*/
}

func getIdStr(id string) string {
	return fmt.Sprintf("#%s", id)
}

templ contextSuccess(matchId uint64, contextStr string, fineAt time.Time) {
	@successComp() {
		<h1>Added Context</h1>
		<div>{ fmt.Sprintf("%d", matchId) }</div>
		<div>{ contextStr }</div>
		<div>
			if fineAt.After(twoWeeksAgo) {
				{ humanize.Time(fineAt) }
			} else {
				{ fineAt.Format("2006-01-02T15:04") }
			}
		</div>
	}
}

templ successComp() {
	<div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-lg">
		<p class="text-lg font-semibold">{ children... }</p>
	</div>
}

templ success(msg string) {
	if len(msg) > 0 {
		<div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-lg">
			<p class="text-lg font-semibold">{ msg }</p>
		</div>
	}
}

templ errMsg(msg string) {
	<div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-lg">
		<p class="text-lg font-semibold">{ msg }</p>
	</div>
}

func niceDate(date *time.Time) string {
    return date.Format("January 2, 2006")
}

templ fineSuperSelect(players []PlayerWithFines, approvedPFines []PresetFine) {
	<div class="w-full mx-auto bg-gray-200 shadow-xl m-10" id="fine-ss" hx-get="/fines/add" hx-trigger="pageLoaded" hx-target="#fine-ss">
		<form id="ss-form" hx-post="/fines-multi" method="POST" class="flex flex-col space-y-4 bg-white shadow-md p-6 rounded-lg">
			<p class="font-bold">Select players and fines:</p>
			<div class="flex flex-row">
				<label for="select-fine" class="mt-2 pr-2 font-semibold text-gray-700">Fines</label>
				<select
 					id="select-fine"
 					hx-ext="tomselect"
 					ts-persist="true"
 					ts-create="true"
 					ts-create-filter="true"
 					ts-create-on-blue="true"
 					ts-no-active="true"
 					ts-add-post-url="/fines/add"
 					ts-add-post-url-body-value="reason"
 					ts-item-class="text-3xl py-3"
 					ts-option-class="text-3xl w-full py-3 bg-green-100"
 					tx-max-items="99"
 					name="pfines[]"
 					multiple
 					placeholder="Select fine(s)..."
 					class="text-3xl border border-gray-300 rounded-md text-gray-700 flex-grow mb-2"
				>
					<option value="">Select a fine...</option>
					for _, apf := range approvedPFines {
						<option value={ fmt.Sprintf("%d", apf.ID) }>{ apf.Reason }</option>
					}
				</select>
			</div>
			<div class="flex flex-row">
				<label for="select-player" class="mt-2 pr-2 font-semibold text-gray-700">Players</label>
				<select
 					id="select-player"
 					hx-ext="tomselect"
 					tx-max-items="99"
 					name="players[]"
 					ts-item-class="text-3xl py-3"
 					ts-option-class="text-3xl w-full py-3 bg-green-100"
 					multiple
 					placeholder="Select player(s)..."
 					class="text-3xl  border border-gray-300 rounded-md text-gray-700 flex-grow mb-2"
				>
					<option value="">Select a player...</option>
					for _, p := range players {
						<option value={ fmt.Sprintf("%d", p.ID) }>{ p.Name }</option>
					}
				</select>
			</div>
			<button type="submit" class={ bigAdd }>Create Fine(s)</button>
			<div id="results-container"></div>
		</form>
	</div>
}

templ fineSuperSelectResults(players []PlayerWithFines, approvedPFines[]PresetFine, newFines []Fine) {
	@fineSuperSelect(players, approvedPFines)
	if len(newFines) > 0 {
		<div class="list-none bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-lg">
			{ fmt.Sprintf("Added %d Fines", len(newFines)) }
			if len(newFines) > 0 {
				for _, p := range players {
					for _, nf := range newFines {
						if p.ID == nf.PlayerID {
							<details>
								<summary>
									{ fmt.Sprintf("%s - %s",nf.Reason, p.Name) }
								</summary>
								{ fmt.Sprintf("%+v",nf) }
							</details>
						}
					}
				}
			} else {
				<div>No fines created? { fmt.Sprintf("%d %d", len(approvedPFines)) }</div>
			}
		</div>
	} else {
		<div class="bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4" role="alert">
			<p>no fines added? Make sure to select fines/players above</p>
		</div>
	}
}

