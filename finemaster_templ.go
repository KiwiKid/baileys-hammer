// Code generated by templ@v0.2.364 DO NOT EDIT.

package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"
)

var finemasterBaseUrl = "/finemaster"

func secureFineMasterbaseUrl(finemasterBaseUrl string, pass string) string {
	return fmt.Sprintf("%s/%s", finemasterBaseUrl, pass)
}

func finemasterNav(finemasterBaseUrl string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<nav class=\"fixed inset-x-0 bottom-0 bg-gray-800 text-white pb-18\"><div class=\"flex justify-between\"><a href=\"")
		if err != nil {
			return err
		}
		var var_2 templ.SafeURL = makeSafeUrlWithAnchorV2(finemasterBaseUrl, "fine-add", true)
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_2)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"flex-1 text-center py-3 hover:bg-gray-700\">")
		if err != nil {
			return err
		}
		var_3 := `Add`
		_, err = templBuffer.WriteString(var_3)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a><button _=\"on click toggle .hidden on .quick-fine then go to top of #quick-finer\" class=\"flex-1 text-center py-3 hover:bg-gray-700\">")
		if err != nil {
			return err
		}
		var_4 := `Quick Fine`
		_, err = templBuffer.WriteString(var_4)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button><a href=\"")
		if err != nil {
			return err
		}
		var var_5 templ.SafeURL = makeSafeUrlWithAnchor(finemasterBaseUrl, false, false, false, true, false, "preset-fine")
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_5)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"flex-1 text-center py-3 hover:bg-gray-700\">")
		if err != nil {
			return err
		}
		var_6 := `Fine List`
		_, err = templBuffer.WriteString(var_6)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a><a href=\"")
		if err != nil {
			return err
		}
		var var_7 templ.SafeURL = makeSafeUrlWithAnchor(finemasterBaseUrl, false, false, true, false, false, "players-manage")
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_7)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"flex-1 text-center py-3 hover:bg-gray-700\">")
		if err != nil {
			return err
		}
		var_8 := `Players`
		_, err = templBuffer.WriteString(var_8)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a><a href=\"")
		if err != nil {
			return err
		}
		var var_9 templ.SafeURL = makeSafeUrlWithAnchor(finemasterBaseUrl, false, false, false, false, false, "fine-list-container")
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_9)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"flex-1 text-center py-3 hover:bg-gray-700\">")
		if err != nil {
			return err
		}
		var_10 := `Recent`
		_, err = templBuffer.WriteString(var_10)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></div></nav>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func finemaster(pass string, players []PlayerWithFines, fineWithPlayers []FineWithPlayer, pFines []PresetFine, matches []Match, qp FineMasterQueryParams) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_11 := templ.GetChildren(ctx)
		if var_11 == nil {
			var_11 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<html hx-boost=\"true\">")
		if err != nil {
			return err
		}
		err = header().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<body class=\"p-1\"><div class=\"bg-gray-900 text-center p-5\"><h1 class=\"text-xl md:text-3xl lg:text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-blue-500 to-teal-400\">")
		if err != nil {
			return err
		}
		var_12 := `Fine Master Zone`
		_, err = templBuffer.WriteString(var_12)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1></div><div class=\"grid grid-cols-1 gap-2\">")
		if err != nil {
			return err
		}
		err = fineAddV2(secureFineMasterbaseUrl(finemasterBaseUrl, pass), qp.FinesOpen, players, pFines, true).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><div class=\"container mx-auto p-4 hidden\" id=\"quick-finer\"><div class=\"flex items-center justify-center bg-gray-100 mx-auto\"><ul>")
		if err != nil {
			return err
		}
		for _, p := range players {
			_, err = templBuffer.WriteString("<li class=\"mb-2\">")
			if err != nil {
				return err
			}
			var var_13 = []any{bigPri}
			err = templ.RenderCSSItems(ctx, templBuffer, var_13...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<div _=\"on click toggle .hidden on next &lt;section/&gt;\" class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_13).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var var_14 string = p.Name
			_, err = templBuffer.WriteString(templ.EscapeString(var_14))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var_15 := `- `
			_, err = templBuffer.WriteString(var_15)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var var_16 string = fmt.Sprintf("$%d (%d)", p.TotalFines, p.TotalFineCount)
			_, err = templBuffer.WriteString(templ.EscapeString(var_16))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			if UseRoles(ctx) {
				if len(p.Role) > 0 {
					var_17 := `- `
					_, err = templBuffer.WriteString(var_17)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(" ")
					if err != nil {
						return err
					}
					var var_18 string = p.Role
					_, err = templBuffer.WriteString(templ.EscapeString(var_18))
					if err != nil {
						return err
					}
				}
			}
			_, err = templBuffer.WriteString("</div><section class=\"fines-info hidden\"><div class=\"p-2\"><div class=\"p-2\">")
			if err != nil {
				return err
			}
			for _, f := range p.Fines {
				_, err = templBuffer.WriteString("<div class=\"mt-1\"><p>")
				if err != nil {
					return err
				}
				var var_19 string = f.Reason
				_, err = templBuffer.WriteString(templ.EscapeString(var_19))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(" ")
				if err != nil {
					return err
				}
				var_20 := `- `
				_, err = templBuffer.WriteString(var_20)
				if err != nil {
					return err
				}
				var var_21 string = fmt.Sprintf("$%.0f", f.Amount)
				_, err = templBuffer.WriteString(templ.EscapeString(var_21))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</p></div>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</div></div></section><section class=\"hidden quick-fine\">")
			if err != nil {
				return err
			}
			for _, pf := range pFines {
				if pf.Approved && !pf.NotQuickFine {
					_, err = templBuffer.WriteString("<form class=\" inline-flex mx-2 space-y-2\">")
					if err != nil {
						return err
					}
					var var_22 = []any{fmt.Sprintf("fine-group-%d-%d", pf.ID, p.ID)}
					err = templ.RenderCSSItems(ctx, templBuffer, var_22...)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("<div hidden class=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_22).String()))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\"><input type=\"hidden\" name=\"playerId\" value=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%v", p.ID)))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\"><input type=\"hidden\" name=\"presetFineId\" value=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%v", pf.ID)))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\"><input type=\"hidden\" name=\"approved\" value=\"on\"><input type=\"hidden\" name=\"dontRedirect\" value=\"true\"></div>")
					if err != nil {
						return err
					}
					var var_23 = []any{bigAdd}
					err = templ.RenderCSSItems(ctx, templBuffer, var_23...)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("<button hx-post=\"/fines\" hx-swap=\"this\" hx-include=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf(".fine-group-%d-%d", pf.ID, p.ID)))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\" class=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_23).String()))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\">")
					if err != nil {
						return err
					}
					var var_24 string = fmt.Sprintf("%s ($%v)", pf.Reason, pf.Amount)
					_, err = templBuffer.WriteString(templ.EscapeString(var_24))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</button></form>")
					if err != nil {
						return err
					}
				}
			}
			_, err = templBuffer.WriteString("</section></li>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</ul></div>")
		if err != nil {
			return err
		}
		var var_25 = []any{bigPri}
		err = templ.RenderCSSItems(ctx, templBuffer, var_25...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div _=\"on click toggle .hidden on .quick-fine\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_25).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var_26 := `Toggle Quick Fines`
		_, err = templBuffer.WriteString(var_26)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></div>")
		if err != nil {
			return err
		}
		err = playersManage(secureFineMasterbaseUrl(finemasterBaseUrl, pass), players, config, qp.PlayerOpen).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = presetFines(fmt.Sprintf("%s/%s", finemasterBaseUrl, pass), pass, qp.PresetFinesOpen, pFines).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = matchesManage(secureFineMasterbaseUrl(finemasterBaseUrl, pass), qp.MatchesOpen, matches, players).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = fineList(fineWithPlayers, 0, qp.PresetFineUpdated, false).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"mt-96\"></div>")
		if err != nil {
			return err
		}
		err = finemasterNav(fmt.Sprintf("%s/%s", finemasterBaseUrl, pass)).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</body>")
		if err != nil {
			return err
		}
		err = tomSelectLinks().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func editPresetFine(baseUrl string, passCode string, pFine PresetFine, msg string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_27 := templ.GetChildren(ctx)
		if var_27 == nil {
			var_27 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div id=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("pf-%d", pFine.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"px-8 py-6 text-left bg-white shadow-xl m-10\"><form hx-post=\"/preset-fines\" hx-swap=\"outerHTML\" hx-target=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("#pf-%d", pFine.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"mt-4\"><input type=\"hidden\" name=\"pass\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(passCode))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><input type=\"hidden\" name=\"pfid\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%d", pFine.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><div class=\"mt-4\"><label for=\"reason\" class=\"block\"><input required value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(pFine.Reason))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" type=\"text\" name=\"reason\" id=\"reason\" placeholder=\"Reason for the fine\" class=\"w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600\"></label></div><div class=\"mt-4\"><label for=\"context\" class=\"block\"><input value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(pFine.Context))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" type=\"text\" name=\"context\" id=\"context\" placeholder=\"Details\" class=\"w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600\"></label></div><div class=\"mt-4\"><label for=\"amount\" class=\"block\">")
		if err != nil {
			return err
		}
		var_28 := `Amount ($) `
		_, err = templBuffer.WriteString(var_28)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" <input required value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%.2f", pFine.Amount)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" type=\"number\" step=\"0.5\" name=\"amount\" id=\"amount\" placeholder=\"Amount\" class=\"p-2 w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600\"></label></div><div class=\"mt-4\"><label for=\"displayOrder\" class=\"block\">")
		if err != nil {
			return err
		}
		var_29 := `Display Order `
		_, err = templBuffer.WriteString(var_29)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" <input")
		if err != nil {
			return err
		}
		if pFine.DisplayOrder > 0 {
			_, err = templBuffer.WriteString(" value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%d", pFine.DisplayOrder)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" type=\"number\" step=\"1\" name=\"displayOrder\" id=\"displayOrder\" placeholder=\"1-9999\" class=\"p-2 w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600\"></label></div><div class=\"mt-4\"><label class=\"block\"><input type=\"checkbox\" name=\"approved\" class=\"text-2xl m-2 py-2 mt-2 p-2 \"")
		if err != nil {
			return err
		}
		if pFine.IsKudos {
			_, err = templBuffer.WriteString(" checked=\"checked\"")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("> ")
		if err != nil {
			return err
		}
		var_30 := `Is Kudos (🚧)`
		_, err = templBuffer.WriteString(var_30)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label></div><div class=\"mt-4\"><label class=\"block\"><input type=\"checkbox\" name=\"approved\" class=\"text-2xl m-2 py-2 mt-2 p-2 \"")
		if err != nil {
			return err
		}
		if pFine.Approved {
			_, err = templBuffer.WriteString(" checked=\"checked\"")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("> ")
		if err != nil {
			return err
		}
		var_31 := `Approved`
		_, err = templBuffer.WriteString(var_31)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label></div><div class=\"flex items-center justify-between mt-4\">")
		if err != nil {
			return err
		}
		var var_32 = []any{bigAdd}
		err = templ.RenderCSSItems(ctx, templBuffer, var_32...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<button type=\"submit\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_32).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var_33 := `Save Edits`
		_, err = templBuffer.WriteString(var_33)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></div>")
		if err != nil {
			return err
		}
		if len(msg) > 0 {
			err = success(msg).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("<div class=\"flex items-center justify-between mt-4\">")
		if err != nil {
			return err
		}
		if pFine.NotQuickFine {
			var var_34 = []any{bigPri}
			err = templ.RenderCSSItems(ctx, templBuffer, var_34...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<button class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_34).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-post=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/preset-fines/show?pfid=%d", pFine.ID)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var_35 := `Show in Quick Fines`
			_, err = templBuffer.WriteString(var_35)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</button>")
			if err != nil {
				return err
			}
		} else {
			var var_36 = []any{bigPri}
			err = templ.RenderCSSItems(ctx, templBuffer, var_36...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<button class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_36).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-post=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/preset-fines/hide?pfid=%d", pFine.ID)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var_37 := `Hide from Quick Fines`
			_, err = templBuffer.WriteString(var_37)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</button>")
			if err != nil {
				return err
			}
		}
		var var_38 = []any{bigDel}
		err = templ.RenderCSSItems(ctx, templBuffer, var_38...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<button class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_38).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-delete=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/preset-fines?pfid=%d", pFine.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-confirm=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("Remove %s from standard fines?", pFine.Reason)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var_39 := `Remove from default fine list`
		_, err = templBuffer.WriteString(var_39)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></div></form><div class=\"flex justify-center w-full\">")
		if err != nil {
			return err
		}
		var var_40 = []any{bigSec}
		err = templ.RenderCSSItems(ctx, templBuffer, var_40...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<a href=\"")
		if err != nil {
			return err
		}
		var var_41 templ.SafeURL = makeSafeUrl(baseUrl, false, false, false, false, false)
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_41)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_40).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var_42 := `Close`
		_, err = templBuffer.WriteString(var_42)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func newPresetFine(baseUrl string, passCode string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_43 := templ.GetChildren(ctx)
		if var_43 == nil {
			var_43 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div><form hx-post=\"/preset-fines\" hx-swap=\"outerHTML\" hx-target=\"#pf-create\" class=\"mt-4\"><input type=\"hidden\" name=\"pass\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(passCode))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><div class=\"mt-4\"><label for=\"reason\" class=\"block\"><input required type=\"text\" name=\"reason\" id=\"reason\" placeholder=\"Reason for the fine\" class=\"w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600\"></label></div><div class=\"mt-4\"><label for=\"amount\" class=\"block\">")
		if err != nil {
			return err
		}
		var_44 := `Amount ($)`
		_, err = templBuffer.WriteString(var_44)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input required type=\"text\" name=\"reason\" id=\"reason\" placeholder=\"Reason for the fine\" class=\"w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600\"></div><div class=\"mt-4\"><label for=\"context\" class=\"block\"><input type=\"text\" name=\"context\" id=\"context\" placeholder=\"Details\" class=\"w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600\"></label></div><div class=\"mt-4\"><label class=\"block\"><input type=\"checkbox\" checked=\"checked\" name=\"approved\" class=\"text-2xl m-2 py-2 mt-2 p-2 \">")
		if err != nil {
			return err
		}
		var_45 := `Approved`
		_, err = templBuffer.WriteString(var_45)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label></div><div class=\"flex items-center justify-between mt-4\">")
		if err != nil {
			return err
		}
		var var_46 = []any{bigAdd}
		err = templ.RenderCSSItems(ctx, templBuffer, var_46...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<button type=\"submit\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_46).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var_47 := `Add New Fine`
		_, err = templBuffer.WriteString(var_47)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></div></form><div class=\"flex justify-center w-full\">")
		if err != nil {
			return err
		}
		var var_48 = []any{bigSec}
		err = templ.RenderCSSItems(ctx, templBuffer, var_48...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<a href=\"")
		if err != nil {
			return err
		}
		var var_49 templ.SafeURL = makeSafeUrl(baseUrl, false, false, false, false, false)
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_49)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_48).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var_50 := `Close`
		_, err = templBuffer.WriteString(var_50)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></div></div><div id=\"pf-create\"></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func presetFines(baseUrl string, passCode string, isOpen bool, presetFines []PresetFine) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_51 := templ.GetChildren(ctx)
		if var_51 == nil {
			var_51 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if isOpen {
			_, err = templBuffer.WriteString("<div class=\"px-8 py-6 text-left bg-white shadow-xl m-10\" id=\"preset-fine\"><h3 class=\"text-2xl font-bold text-center\">")
			if err != nil {
				return err
			}
			var_52 := `Add or Approve Fines`
			_, err = templBuffer.WriteString(var_52)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h3><div class=\"w-full flex justify-center items-center py-2\"><p>")
			if err != nil {
				return err
			}
			var_53 := `Make fines submitted appear in the drop-down list, or add new fines to the drop down`
			_, err = templBuffer.WriteString(var_53)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</p></div><div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\"><div class=\"text-2xl\"><h1 class=\"font-bold text-center\">")
			if err != nil {
				return err
			}
			var_54 := `Manage Listed Fines `
			_, err = templBuffer.WriteString(var_54)
			if err != nil {
				return err
			}
			var var_55 string = fmt.Sprintf("(%d)", len(presetFines))
			_, err = templBuffer.WriteString(templ.EscapeString(var_55))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h1><p>")
			if err != nil {
				return err
			}
			var_56 := `Deleting these fines will NOT delete any player specific fines, just the selection options.`
			_, err = templBuffer.WriteString(var_56)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</p>")
			if err != nil {
				return err
			}
			for _, pfine := range presetFines {
				if !pfine.Approved && false {
					_, err = templBuffer.WriteString("<div class=\"mt-2 text-center\"><div>")
					if err != nil {
						return err
					}
					var var_57 = []any{bigAdd}
					err = templ.RenderCSSItems(ctx, templBuffer, var_57...)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("<button hx-post=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/preset-fines/approve?pfid=%d", pfine.ID)))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\" hx-swap=\"outerHTML\" class=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_57).String()))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\">")
					if err != nil {
						return err
					}
					var_58 := `☐ ✨ `
					_, err = templBuffer.WriteString(var_58)
					if err != nil {
						return err
					}
					var var_59 string = pfine.Reason
					_, err = templBuffer.WriteString(templ.EscapeString(var_59))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(" ")
					if err != nil {
						return err
					}
					var var_60 string = fmt.Sprintf("$%.0f", pfine.Amount)
					_, err = templBuffer.WriteString(templ.EscapeString(var_60))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</button>")
					if err != nil {
						return err
					}
					var var_61 = []any{bigDel}
					err = templ.RenderCSSItems(ctx, templBuffer, var_61...)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("<button class=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_61).String()))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\" hx-delete=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/preset-fines?pfid=%d", pfine.ID)))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\" hx-confirm=\"")
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("Remove %s from standard fines?", pfine.Reason)))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("\">")
					if err != nil {
						return err
					}
					var_62 := `Delete`
					_, err = templBuffer.WriteString(var_62)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</button></div></div>")
					if err != nil {
						return err
					}
				}
			}
			err = newPresetFine(baseUrl, passCode).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			for _, pfine := range presetFines {
				err = editPresetFine(baseUrl, passCode, pfine, "").Render(ctx, templBuffer)
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</div></div></div>")
			if err != nil {
				return err
			}
		} else {
			_, err = templBuffer.WriteString("<div class=\"flex justify-center w-full p-3\">")
			if err != nil {
				return err
			}
			var var_63 = []any{bigPri}
			err = templ.RenderCSSItems(ctx, templBuffer, var_63...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<a href=\"")
			if err != nil {
				return err
			}
			var var_64 templ.SafeURL = makeSafeUrlWithAnchor(baseUrl, false, false, false, true, false, "preset-fine")
			_, err = templBuffer.WriteString(templ.EscapeString(string(var_64)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_63).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var_65 := `Manage Fine List`
			_, err = templBuffer.WriteString(var_65)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a></div>")
			if err != nil {
				return err
			}
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func matchesManage(baseUrl string, isOpen bool, matches []Match, pwfs []PlayerWithFines) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_66 := templ.GetChildren(ctx)
		if var_66 == nil {
			var_66 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if isOpen {
			_, err = templBuffer.WriteString("<div class=\"px-8 py-6 text-left bg-white shadow-xl m-10\" id=\"preset-fine\"><h3 class=\"text-2xl font-bold text-center\">")
			if err != nil {
				return err
			}
			var_67 := `Add/Edit Matches`
			_, err = templBuffer.WriteString(var_67)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h3><div class=\"w-full flex justify-center items-center py-2\"><p>")
			if err != nil {
				return err
			}
			var_68 := `Edit existing matches, or add new ones`
			_, err = templBuffer.WriteString(var_68)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</p></div>")
			if err != nil {
				return err
			}
			err = createMatch(makeSafeUrl(baseUrl, false, false, false, false, false), pwfs).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
			for _, m := range matches {
				var var_69 = []any{bigPri}
				err = templ.RenderCSSItems(ctx, templBuffer, var_69...)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("<button hx-trigger=\"click\" hx-get=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/match/%d", m.ID)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\" hx-swap=\"outerHTML\" class=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_69).String()))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				var_70 := `Edit "vs `
				_, err = templBuffer.WriteString(var_70)
				if err != nil {
					return err
				}
				var var_71 string = m.Opponent
				_, err = templBuffer.WriteString(templ.EscapeString(var_71))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(" ")
				if err != nil {
					return err
				}
				var_72 := `at `
				_, err = templBuffer.WriteString(var_72)
				if err != nil {
					return err
				}
				var var_73 string = m.Location
				_, err = templBuffer.WriteString(templ.EscapeString(var_73))
				if err != nil {
					return err
				}
				var_74 := `"`
				_, err = templBuffer.WriteString(var_74)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</button>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		} else {
			_, err = templBuffer.WriteString("<div class=\"flex justify-center w-full\">")
			if err != nil {
				return err
			}
			var var_75 = []any{bigPri}
			err = templ.RenderCSSItems(ctx, templBuffer, var_75...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<a href=\"")
			if err != nil {
				return err
			}
			var var_76 templ.SafeURL = makeSafeUrlWithAnchorV2(baseUrl, "standard-matches", true)
			_, err = templBuffer.WriteString(templ.EscapeString(string(var_76)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_75).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var_77 := `Manage Matches`
			_, err = templBuffer.WriteString(var_77)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a></div>")
			if err != nil {
				return err
			}
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func playersManage(baseUrl string, players []PlayerWithFines, config *Config, isOpen bool) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_78 := templ.GetChildren(ctx)
		if var_78 == nil {
			var_78 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if isOpen {
			_, err = templBuffer.WriteString("<div class=\"flex items-center justify-center bg-gray-100  p-3\" id=\"players-manage\"><div class=\"px-8 py-6 text-left bg-white shadow-xl m-10\"><!--")
			if err != nil {
				return err
			}
			var_79 := ` Section for Adding New Player `
			_, err = templBuffer.WriteString(var_79)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("--><h3 class=\"text-2xl font-bold text-center\" title=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%+v", config)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var_80 := `Add New Player (`
			_, err = templBuffer.WriteString(var_80)
			if err != nil {
				return err
			}
			var var_81 string = fmt.Sprintf("%d", len(players))
			_, err = templBuffer.WriteString(templ.EscapeString(var_81))
			if err != nil {
				return err
			}
			var_82 := `)`
			_, err = templBuffer.WriteString(var_82)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h3><form hx-post=\"/players\" method=\"POST\" class=\"mt-4\"><div><label for=\"name\" class=\"block\">")
			if err != nil {
				return err
			}
			var_83 := `Name`
			_, err = templBuffer.WriteString(var_83)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label><input required type=\"text\" name=\"name\" id=\"name\" placeholder=\"Name\" class=\"w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600\"></div><div class=\"flex items-center w-full\">")
			if err != nil {
				return err
			}
			var var_84 = []any{bigAdd}
			err = templ.RenderCSSItems(ctx, templBuffer, var_84...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<button type=\"submit\" class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_84).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var_85 := `Add Player`
			_, err = templBuffer.WriteString(var_85)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</button></div></form><div class=\"p-6 max-w-36\"><div class=\"flex justify-center w-full p-3\">")
			if err != nil {
				return err
			}
			var var_86 = []any{bigSec}
			err = templ.RenderCSSItems(ctx, templBuffer, var_86...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<a href=\"")
			if err != nil {
				return err
			}
			var var_87 templ.SafeURL = makeSafeUrl(baseUrl, false, false, false, false, false)
			_, err = templBuffer.WriteString(templ.EscapeString(string(var_87)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-transition=\"true\" class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_86).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var_88 := `Close`
			_, err = templBuffer.WriteString(var_88)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a></div><h3 class=\"text-2xl font-bold text-center mt-8\">")
			if err != nil {
				return err
			}
			var_89 := `Manage Players`
			_, err = templBuffer.WriteString(var_89)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h3>")
			if err != nil {
				return err
			}
			for _, p := range players {
				err = playerRoleSelector(p, config, "").Render(ctx, templBuffer)
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</div><div class=\"flex justify-center w-full p-3\">")
			if err != nil {
				return err
			}
			var var_90 = []any{bigSec}
			err = templ.RenderCSSItems(ctx, templBuffer, var_90...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<a href=\"")
			if err != nil {
				return err
			}
			var var_91 templ.SafeURL = makeSafeUrl(baseUrl, false, false, false, false, false)
			_, err = templBuffer.WriteString(templ.EscapeString(string(var_91)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-transition=\"true\" class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_90).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var_92 := `Close`
			_, err = templBuffer.WriteString(var_92)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a></div></div></div>")
			if err != nil {
				return err
			}
		} else {
			_, err = templBuffer.WriteString("<div class=\"flex justify-center w-full p-3\">")
			if err != nil {
				return err
			}
			var var_93 = []any{bigPri}
			err = templ.RenderCSSItems(ctx, templBuffer, var_93...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<a href=\"")
			if err != nil {
				return err
			}
			var var_94 templ.SafeURL = makeSafeUrlWithAnchorV2(baseUrl, "players-manage", true)
			_, err = templBuffer.WriteString(templ.EscapeString(string(var_94)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-transition=\"true\" class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_93).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var_95 := `Manage Players`
			_, err = templBuffer.WriteString(var_95)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a></div>")
			if err != nil {
				return err
			}
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
