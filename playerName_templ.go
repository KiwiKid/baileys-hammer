// Code generated by templ@v0.2.364 DO NOT EDIT.

package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"
)

func playerName(player Player) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div>")
		if err != nil {
			return err
		}
		var var_2 string = player.Name
		_, err = templBuffer.WriteString(templ.EscapeString(var_2))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func playerInputSelector(players []PlayerWithFines, playerId uint64) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_3 := templ.GetChildren(ctx)
		if var_3 == nil {
			var_3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if len(UsePlayerOfTheDayName(ctx)) > 0 {
			_, err = templBuffer.WriteString("<div hx-swap-oob=\"true\" id=\"player-select-potd\" class=\"mt-4\"><label class=\"text-lg font-semibold\">")
			if err != nil {
				return err
			}
			var var_4 string = UsePlayerOfTheDayName(ctx)
			_, err = templBuffer.WriteString(templ.EscapeString(var_4))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var_5 := `(`
			_, err = templBuffer.WriteString(var_5)
			if err != nil {
				return err
			}
			var var_6 string = fmt.Sprintf("%d", len(players))
			_, err = templBuffer.WriteString(templ.EscapeString(var_6))
			if err != nil {
				return err
			}
			var_7 := `):`
			_, err = templBuffer.WriteString(var_7)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label><select name=\"playerOfTheDay\" class=\"mt-1 w-full border-gray-300  bg-white rounded-md shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\"><option value=\"\">")
			if err != nil {
				return err
			}
			var_8 := `N/A`
			_, err = templBuffer.WriteString(var_8)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option>")
			if err != nil {
				return err
			}
			for _, p := range players {
				_, err = templBuffer.WriteString("<option")
				if err != nil {
					return err
				}
				if p.ID == uint(playerId) {
					_, err = templBuffer.WriteString(" selected")
					if err != nil {
						return err
					}
				}
				_, err = templBuffer.WriteString(" value=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(S("%v", p.ID)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				var var_9 string = S("%s", p.Name)
				_, err = templBuffer.WriteString(templ.EscapeString(var_9))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</option>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</select></div>")
			if err != nil {
				return err
			}
		}
		if len(UseDudOfTheDayName(ctx)) > 0 {
			_, err = templBuffer.WriteString("<div hx-swap-oob=\"true\" id=\"player-select-dud-of-day\" class=\"mt-4\"><label class=\"text-lg font-semibold\">")
			if err != nil {
				return err
			}
			var var_10 string = UseDudOfTheDayName(ctx)
			_, err = templBuffer.WriteString(templ.EscapeString(var_10))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var_11 := `(`
			_, err = templBuffer.WriteString(var_11)
			if err != nil {
				return err
			}
			var var_12 string = fmt.Sprintf("%d", len(players))
			_, err = templBuffer.WriteString(templ.EscapeString(var_12))
			if err != nil {
				return err
			}
			var_13 := `):`
			_, err = templBuffer.WriteString(var_13)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label><select name=\"dudOfTheDay\" class=\"mt-1 w-full border-gray-300  bg-white rounded-md shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\"><option value=\"\">")
			if err != nil {
				return err
			}
			var_14 := `N/A`
			_, err = templBuffer.WriteString(var_14)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option>")
			if err != nil {
				return err
			}
			for _, p := range players {
				_, err = templBuffer.WriteString("<option")
				if err != nil {
					return err
				}
				if p.ID == uint(playerId) {
					_, err = templBuffer.WriteString(" selected")
					if err != nil {
						return err
					}
				}
				_, err = templBuffer.WriteString(" value=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(S("%v", p.ID)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				var var_15 string = S("%s", p.Name)
				_, err = templBuffer.WriteString(templ.EscapeString(var_15))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</option>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</select></div>")
			if err != nil {
				return err
			}
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func playerRoleSelector(player PlayerWithFines, msg string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_16 := templ.GetChildren(ctx)
		if var_16 == nil {
			var_16 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"\" id=\"players-ss\"><form class=\"todo\" hx-post=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/players?playerId=%d", player.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-swap=\"outerHTML\"><div class=\"container p-2\"><input type=\"hidden\" name=\"ID\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%d", player.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><label for=\"role\" class=\"block mt-2\">")
		if err != nil {
			return err
		}
		var_17 := `Name      `
		_, err = templBuffer.WriteString(var_17)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" <input type=\"text\" name=\"Name\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(player.Name))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" id=\"name\" placeholder=\"Player name\" class=\"w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600\"></label>")
		if err != nil {
			return err
		}
		if UseRoles(ctx) {
			_, err = templBuffer.WriteString("<label for=\"role\" class=\"block mt-2\">")
			if err != nil {
				return err
			}
			var_18 := `Role      `
			_, err = templBuffer.WriteString(var_18)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" <input type=\"text\" name=\"role\" value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(player.Role))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" id=\"role\" placeholder=\"Role\" class=\"w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600\"></label> <label for=\"role\" class=\"block mt-2\">")
			if err != nil {
				return err
			}
			var_19 := `Role Description      `
			_, err = templBuffer.WriteString(var_19)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" <input type=\"text\" name=\"roleDescription\" id=\"roleDescription\" value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(player.RoleDescription))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" placeholder=\"Role Description\" class=\"w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600\"></label>")
			if err != nil {
				return err
			}
		}
		if len(msg) > 0 {
			err = success(msg).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("<div class=\"flex flex-row mt-2\">")
		if err != nil {
			return err
		}
		var var_20 = []any{bigPri}
		err = templ.RenderCSSItems(ctx, templBuffer, var_20...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<button type=\"submit\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_20).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var_21 := `Update Player`
		_, err = templBuffer.WriteString(var_21)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></div><div class=\"flex flex-row mt-2\">")
		if err != nil {
			return err
		}
		var var_22 = []any{bigDel}
		err = templ.RenderCSSItems(ctx, templBuffer, var_22...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<button type=\"submit\" hx-delete=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/players?playerId=%d", player.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-confirm=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("Are you sure you want to delete %s?", player.Name)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_22).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var_23 := `Delete `
		_, err = templBuffer.WriteString(var_23)
		if err != nil {
			return err
		}
		var var_24 string = player.Name
		_, err = templBuffer.WriteString(templ.EscapeString(var_24))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></div></div></form></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
