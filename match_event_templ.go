// Code generated by templ@v0.2.364 DO NOT EDIT.

package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "fmt"
import "github.com/dustin/go-humanize"

func listMatchEvents(matchState MatchState, matchEvents []MatchEvent) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if UseMatchEventTracker(ctx) {
			_, err = templBuffer.WriteString("<div hx-get=\"/playersName\" hx-trigger=\"load once\" hx-target=\"#response-div\"><div id=\"response-div\">")
			if err != nil {
				return err
			}
			var_2 := `Loading names`
			_, err = templBuffer.WriteString(var_2)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div></div> <div id=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("match-event-list-%d", matchState.MatchID)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\"mx-auto text-center\"><div class=\"text-3xl p-10\">")
			if err != nil {
				return err
			}
			var_3 := `Match Events (`
			_, err = templBuffer.WriteString(var_3)
			if err != nil {
				return err
			}
			var var_4 string = S(len(matchEvents))
			_, err = templBuffer.WriteString(templ.EscapeString(var_4))
			if err != nil {
				return err
			}
			var_5 := `)`
			_, err = templBuffer.WriteString(var_5)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div><table class=\"min-w-full divide-y divide-gray-200\"><thead class=\"bg-gray-50\"><tr><th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">")
			if err != nil {
				return err
			}
			var_6 := `Name`
			_, err = templBuffer.WriteString(var_6)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</th><th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">")
			if err != nil {
				return err
			}
			var_7 := `Type`
			_, err = templBuffer.WriteString(var_7)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</th><th scope=\"col\" class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">")
			if err != nil {
				return err
			}
			var_8 := `Time `
			_, err = templBuffer.WriteString(var_8)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</th></tr></thead><tbody class=\"bg-white divide-y divide-gray-200\">")
			if err != nil {
				return err
			}
			for _, e := range matchEvents {
				_, err = templBuffer.WriteString("<tr class=\"bg-yellow-200 divide-y divide-gray-200\"><td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">")
				if err != nil {
					return err
				}
				var var_9 string = e.EventName
				_, err = templBuffer.WriteString(templ.EscapeString(var_9))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</td><td>")
				if err != nil {
					return err
				}
				var var_10 string = e.EventType
				_, err = templBuffer.WriteString(templ.EscapeString(var_10))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</td><td id=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(F("pname-%d", e.PlayerId)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				var var_11 string = fmt.Sprintf("%v", e.PlayerId)
				_, err = templBuffer.WriteString(templ.EscapeString(var_11))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</td><td>")
				if err != nil {
					return err
				}
				var var_12 string = fmt.Sprintf("%d", e.EventMinute)
				_, err = templBuffer.WriteString(templ.EscapeString(var_12))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(" ")
				if err != nil {
					return err
				}
				var_13 := `- `
				_, err = templBuffer.WriteString(var_13)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(" ")
				if err != nil {
					return err
				}
				if e.EventTime != nil {
					var var_14 string = humanize.Time(*e.EventTime)
					_, err = templBuffer.WriteString(templ.EscapeString(var_14))
					if err != nil {
						return err
					}
				}
				_, err = templBuffer.WriteString("</td><td>")
				if err != nil {
					return err
				}
				var var_15 = []any{bigDel}
				err = templ.RenderCSSItems(ctx, templBuffer, var_15...)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("<button hx-delete=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/match/%d/event/%d", matchState.MatchID, e.ID)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\" hx-target=\"this\" class=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_15).String()))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				var_16 := `delete`
				_, err = templBuffer.WriteString(var_16)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</button></td></tr>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</tbody></table><div class=\"flex items-center justify-between mt-4\">")
			if err != nil {
				return err
			}
			var var_17 = []any{bigSec}
			err = templ.RenderCSSItems(ctx, templBuffer, var_17...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<a href=\"\" class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_17).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var_18 := `Close`
			_, err = templBuffer.WriteString(var_18)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a></div><div hx-get=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/match/%d/event?isOpen=true", matchState.MatchID)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-trigger=\"click\">")
			if err != nil {
				return err
			}
			var_19 := `new?`
			_, err = templBuffer.WriteString(var_19)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div><!--")
			if err != nil {
				return err
			}
			var_20 := `<div class="py-3">
			<button hx-get={ fmt.Sprintf("/load-more?page=%d", page +1) } hx-target="this" hx-swap="outerHTML" class="px-4 py-2 bg-blue-500 text-white font-semibold rounded hover:bg-blue-700">
				Load More
			</button>
		</div>`
			_, err = templBuffer.WriteString(var_20)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("--></div>")
			if err != nil {
				return err
			}
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func addMatchEvent(meta MatchMeta, matchId uint64, isOpen bool) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_21 := templ.GetChildren(ctx)
		if var_21 == nil {
			var_21 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_22 := `[addMatchEvent: `
		_, err = templBuffer.WriteString(var_22)
		if err != nil {
			return err
		}
		var var_23 string = fmt.Sprintf("meta: %+v", meta, isOpen)
		_, err = templBuffer.WriteString(templ.EscapeString(var_23))
		if err != nil {
			return err
		}
		var_24 := `]`
		_, err = templBuffer.WriteString(var_24)
		if err != nil {
			return err
		}
		if isOpen {
			_, err = templBuffer.WriteString("<form hx-post=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/match/%d/event", matchId)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-swap=\"outerHTML\" class=\"space-y-4\"><div class=\"text-lg font-semibold\">")
			if err != nil {
				return err
			}
			var_25 := `Add Match Event `
			_, err = templBuffer.WriteString(var_25)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			if isOpen {
				var_26 := `"open" `
				_, err = templBuffer.WriteString(var_26)
				if err != nil {
					return err
				}
			} else {
				var_27 := `"close"`
				_, err = templBuffer.WriteString(var_27)
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</div><input type=\"hidden\" name=\"matchId\" value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(S(matchId)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"><div><label for=\"eventName\" class=\"block text-sm font-medium text-gray-700\">")
			if err != nil {
				return err
			}
			var_28 := `Event Name`
			_, err = templBuffer.WriteString(var_28)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label><input type=\"text\" name=\"eventName\" id=\"eventName\" required class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"></div><div><label for=\"eventType\" class=\"block text-sm font-medium text-gray-700\">")
			if err != nil {
				return err
			}
			var_29 := `Event Type`
			_, err = templBuffer.WriteString(var_29)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label><select id=\"eventType\" name=\"eventType\" required _=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString("on change from #eventType toggle .hidden on #player-select if #eventType.value equals 'player-select'"))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\">")
			if err != nil {
				return err
			}
			for _, eventType := range meta.EventTypes {
				_, err = templBuffer.WriteString("<option value=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(eventType))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				var var_30 string = eventType
				_, err = templBuffer.WriteString(templ.EscapeString(var_30))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</option>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</select></div><div id=\"player-select\" class=\"hidden mt-4\"><label class=\"text-lg font-semibold\">")
			if err != nil {
				return err
			}
			var_31 := `Player:`
			_, err = templBuffer.WriteString(var_31)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label><select name=\"playerId\" class=\"mt-1 w-full border-gray-300  bg-white rounded-md shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\"><option selected value=\"\">")
			if err != nil {
				return err
			}
			var_32 := `N/A`
			_, err = templBuffer.WriteString(var_32)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option>")
			if err != nil {
				return err
			}
			for _, p := range meta.Players {
				_, err = templBuffer.WriteString("<option value=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(S("%v", p.ID)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				var var_33 string = S("%s", p.Name)
				_, err = templBuffer.WriteString(templ.EscapeString(var_33))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</option>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</select></div><div><label for=\"eventMinute\" class=\"block text-sm font-medium text-gray-700\">")
			if err != nil {
				return err
			}
			var_34 := `Event Time`
			_, err = templBuffer.WriteString(var_34)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</label><input id=\"eventMinute\" name=\"eventMinute\" value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(S(meta.CurrentMatchMinute)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" required class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"></div><div>")
			if err != nil {
				return err
			}
			var var_35 = []any{bigAdd}
			err = templ.RenderCSSItems(ctx, templBuffer, var_35...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<button type=\"submit\" class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_35).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var_36 := `Add Event`
			_, err = templBuffer.WriteString(var_36)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</button>")
			if err != nil {
				return err
			}
			var var_37 = []any{bigSec}
			err = templ.RenderCSSItems(ctx, templBuffer, var_37...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<a href=\"")
			if err != nil {
				return err
			}
			var var_38 templ.SafeURL = templ.SafeURL(fmt.Sprintf("/match/%d?isOpen=false", matchId))
			_, err = templBuffer.WriteString(templ.EscapeString(string(var_38)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_37).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var_39 := `Close`
			_, err = templBuffer.WriteString(var_39)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a></div></form>")
			if err != nil {
				return err
			}
		} else {
			_, err = templBuffer.WriteString("<div class=\"flex justify-center w-full\">")
			if err != nil {
				return err
			}
			var var_40 = []any{bigPri}
			err = templ.RenderCSSItems(ctx, templBuffer, var_40...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<a href=\"")
			if err != nil {
				return err
			}
			var var_41 templ.SafeURL = templ.SafeURL(fmt.Sprintf("/match/%d?isOpen=true", matchId))
			_, err = templBuffer.WriteString(templ.EscapeString(string(var_41)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-transition=\"true\" class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_40).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var_42 := `Add Event`
			_, err = templBuffer.WriteString(var_42)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a></div>")
			if err != nil {
				return err
			}
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func editMatchEvent(meta MatchMeta, event MatchEvent, isOpen bool, matchId uint64) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_43 := templ.GetChildren(ctx)
		if var_43 == nil {
			var_43 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<form method=\"POST\" hx-post=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/match/%d/event/%d", matchId, event.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"space-y-4\">")
		if err != nil {
			return err
		}
		var_44 := `editMatchEventeditMatchEventeditMatchEvent`
		_, err = templBuffer.WriteString(var_44)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" <div class=\"text-lg font-semibold\">")
		if err != nil {
			return err
		}
		var_45 := `Edit Match Event`
		_, err = templBuffer.WriteString(var_45)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><input type=\"hidden\" name=\"matchId\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(S(matchId)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><input type=\"hidden\" name=\"eventId\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(S(event.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><div><label for=\"eventName\" class=\"block text-sm font-medium text-gray-700\">")
		if err != nil {
			return err
		}
		var_46 := `Event Name`
		_, err = templBuffer.WriteString(var_46)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"text\" name=\"eventName\" id=\"eventName\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(event.EventName))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" required class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"></div><div><label for=\"eventType\" class=\"block text-sm font-medium text-gray-700\">")
		if err != nil {
			return err
		}
		var_47 := `Event Type`
		_, err = templBuffer.WriteString(var_47)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><select id=\"eventType\" name=\"eventType\" required class=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\">")
		if err != nil {
			return err
		}
		for _, eventType := range meta.EventTypes {
			_, err = templBuffer.WriteString("<option value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(eventType))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"")
			if err != nil {
				return err
			}
			if eventType == event.EventType {
				_, err = templBuffer.WriteString(" selected")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			var var_48 string = eventType
			_, err = templBuffer.WriteString(templ.EscapeString(var_48))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</select></div><!--")
		if err != nil {
			return err
		}
		var_49 := `<div>
			<label for="eventTime" class="block text-sm font-medium text-gray-700">Event Time</label>
			<select
 				id="eventTime"
 				name="eventTime"
 				required
 				class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
			>
				 Option for keeping the current time or changing it
				<option value={eventTime}>Current Time</option>
				for _, v := range timeOptions {
					<option
 						value={v.Value}
 						if v.Value == event.EventTimeOffset {
							selected
						}
					>{ v.Name }</option>
				}
			</select> 
		</div>`
		_, err = templBuffer.WriteString(var_49)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("--><div><button type=\"submit\" class=\"inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">")
		if err != nil {
			return err
		}
		var_50 := `Save Changes`
		_, err = templBuffer.WriteString(var_50)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></div></form>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
