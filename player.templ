package main

import (
	"fmt"
)

templ playerNames(players []Player) {
	<div>âœ…</div>
	for _, p := range players {
		<div id={ F("pname-%d", p.ID) } hx-swap-oob="true">
			{ p.Name }
		</div>
	}
}

templ playerName(player Player) {
	<div>{ player.Name }</div>
}

templ playerInputSelector(players []Player, playerId uint, inputType string) {
	switch inputType {
		case "potd":
			<div id="player-select-potd" class="mt-4">
				if len(UsePlayerOfTheDayName(ctx)) > 0 {
					<label class="text-lg font-semibold">
						{ UsePlayerOfTheDayName(ctx) }
						<select
 							hx-ext="tomselect"
							ts-debug="true"
 							name="playerOfTheDay"
 							ts-max-items="1"
 							ts-item-class="text-2xl py-3"
 							ts-option-class="text-2xl py-3"
 							class="mt-1 w-full border-gray-300  bg-white rounded-md shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
						>
							<option value="">N/A</option>
							for _, p := range players {
								<option
 									if p.ID == uint(playerId) {
										selected
									}
 									value={ F("%d", p.ID) }
								>
									{ p.Name }
								</option>
							}
						</select>
					</label>
				}
			</div>
		case "dotd":
			<div id="player-select-dud-of-day" class="mt-4">
				if len(UseDudOfTheDayName(ctx)) > 0 {
					<label class="text-lg font-semibold">
						{ UseDudOfTheDayName(ctx) }
						<select
 							id="player-select-dud-of-day"
 							name="dudOfTheDay"
 							hx-ext="tomselect"
							ts-debug="true"
 							ts-max-items="1"
 							ts-item-class="text-3xl py-3"
 							ts-option-class="text-3xl py-3"
						>
							<option value="">N/A</option>
							for _, p := range players {
								<option
 									if p.ID == uint(playerId) {
										selected
									}
 									value={ F("%d", p.ID) }
								>
									{ p.Name }
								</option>
							}
						</select>
					</label>
				}
			</div>
		default:
			@errMsg(fmt.Sprintf("No type for %s", inputType))
	}
}

func playerHasEventCount(playerId uint, Events []MatchEvent, eventType string) uint {
	var count uint = 0
    for _, event := range Events {
        if event.PlayerId == playerId && event.EventType == eventType {
            count = count + 1
        }
    }
    return count
}


func getEventCount(Events []MatchEvent, eventType string) uint {
	var count uint = 0
   for _, event := range Events {
        if event.EventType == eventType {
            count = count + 1
        }
    }
	return count

}

func presentPlayerEvent(eventCount uint, p Player) string {
	switch eventCount {
		case 0: 
			return ""
		case 1:
			return F("%s, ", p.Name)
		default: 
			return F("%sx%d, ", p.Name, eventCount)
	}
}

templ playerEventInputSelector(players []Player, events []MatchEvent, eventType string) {
	switch eventType {
		case "injury":
			<div id="player-select-injuries" class="mt-4">
				if len(UseInjuryCounterTrackerName(ctx)) > 0 {
					<label class="text-lg font-semibold">
						{ UseInjuryCounterTrackerName(ctx) }
						(
						for _, p := range players {
							{ presentPlayerEvent(playerHasEventCount(p.ID, events, eventType), p) }
						}
						)
						<select
 							hx-ext="tomselect"
							ts-debug="true"
 							ts-no-delete="true"
 							ts-item-class="text-3xl py-3"
 							ts-option-class="text-3xl py-3"
 							name={ fmt.Sprintf("eventType%s", Title(eventType)) }
 							multiple
 							class="mt-1 w-full border-gray-300  bg-white rounded-md shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
						>
							<option value="">N/A</option>
							for _, p := range players {
								<option
 									value={ F("%d", p.ID) }
								>
									{ p.Name }
								</option>
							}
						</select>
					</label>
				}
			</div>
		case "goal":
			<div id="player-select-goals-for" class="mt-4">
				if UseShowGoalScorerMatchList(ctx) {
					<label class="text-lg font-semibold">
						New Goal Scorer: (
						for _, p := range players {
							{ presentPlayerEvent(playerHasEventCount(p.ID, events, eventType), p) }
						}
						)
						<select
 							hx-ext="tomselect"
 							ts-no-delete="true"
 							ts-item-class="text-3xl py-3"
 							ts-option-class="text-3xl py-3"
 							name={ fmt.Sprintf("eventType%s", Title(eventType)) }
 							multiple
 							class="mt-1 w-full border-gray-300  bg-white rounded-md shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
						>
							for _, p := range players {
								<option
 									value={ F("%d", p.ID) }
								>
									{ p.Name }
								</option>
							}
							<option value="">N/A</option>
						</select>
						(delete via events below)
					</label>
				}
			</div>
		case "assist":
			<div id="player-select-assist-for" class="mt-4">
				if UseShowGoalAssister(ctx) {
					<label class="text-lg font-semibold">
						New Assists:
						<select
 							hx-ext="tomselect"
 							ts-no-delete="true"
 							ts-duplicates="true"
 							ts-item-class="text-3xl py-3"
 							ts-option-class="text-3xl py-3"
 							name={ fmt.Sprintf("eventType%s", Title(eventType)) }
 							multiple
 							class="mt-1 w-full border-gray-300  bg-white rounded-md shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
						>
							<option value="">N/A</option>
							for _, p := range players {
								<option
 									value={ F("%d", p.ID) }
								>
									{ p.Name }
								</option>
							}
						</select>
						(delete via events below)
					</label>
					for _, p := range players {
						{ presentPlayerEvent(playerHasEventCount(p.ID, events, eventType), p) }
					}
				}
			</div>
		case "conceded-goal":
			<div id="player-select-conceded-goal" class="mt-4">
				if UseShowGoalScorerMatchList(ctx) {
					<label class="text-lg font-semibold">
						Opponent Goals (
						{ F("%d", getEventCount(events, eventType)) }
						):
						<select
 							hx-ext="tomselect"
 							ts-no-delete="true"
 							ts-max-options="99"
 							ts-duplicates="true"
 							ts-item-class="text-3xl py-3"
 							ts-option-class="text-3xl py-3"
 							name={ fmt.Sprintf("eventType%s", Title(eventType)) }
 							multiple
 							class="mt-1 w-full border-gray-300  bg-white rounded-md shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
						>
							<option value="yes">Opponent Goal</option>
							<option value="yes1">Opponent Goal</option>
							<option value="yes2">Opponent Goal</option>
							<option value="yes3">Opponent Goal</option>
							<option value="yes4">Opponent Goal</option>
							<option value="yes5">Opponent Goal</option>
							<option value="yes6">Opponent Goal</option>
							<option value="yes7">Opponent Goal</option>
							<option value="yes8">Opponent Goal</option>
						</select>
					</label>
				}
			</div>
		default:
			@errMsg(fmt.Sprintf("No eventType for %s", eventType))
	}
}

templ playerRoleSelector(player PlayerWithFines, config *Config, msg string) {
	<div class="w-full" id="players-ss">
		<form class="todo" hx-post={ fmt.Sprintf("/players?playerId=%d", player.ID) } hx-swap="outerHTML">
			<div class="p-2">
				<input
 					type="hidden"
 					name="ID"
 					value={ fmt.Sprintf("%d", player.ID) }
				/>
				<label for="role" class="block mt-2">
					Name      
					<input
 						type="text"
 						name="Name"
 						value={ player.Name }
 						id="name"
 						placeholder="Player name"
 						class="w-full  text-3xl px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600"
					/>
				</label>
				if UseRoles(ctx) {
					<label for="role" class="block mt-2">
						Role      
						<input
 							type="text"
 							name="role"
 							value={ player.Role }
 							id="role"
 							placeholder="Role"
 							class="w-full  text-3xl px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600"
						/>
					</label>
					<label for="role" class="block mt-2">
						Role Description      
						<input
 							type="text"
 							name="roleDescription"
 							id="roleDescription"
 							value={ player.RoleDescription }
 							placeholder="Role Description"
 							class="w-full text-3xl px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600"
						/>
						if len(UseInjuryCounterTrackerName(ctx)) > 0  && "1" == "2" {
							<div class="flex flex-row mt-2">
								<button type="submit" hx-get={ fmt.Sprintf("/match/%d/event", 9999) } class={ bigPri }>Add Injury</button>
							</div>
						}
					</label>
				}
				<!--<label for="SubsOutstandingAmount" class="block mt-2">SubsOutstandingAmount
					<input 
						type="text"
						name="subsOutstandingAmount"
						id="subsOutstandingAmount"
						value={ fmt.Sprintf("%v", player.SubsOutstandingAmount) }
						placeholder="Subs Outstanding"
						class="w-full text-3xl px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600"
					/>
				</label>
				<label for="FinesOutstandingAmount" class="block mt-2">FinesOutstandingAmount
					<input 
						type="text"
						name="finesOutstandingAmount"
						id="finesOutstandingAmount"
						value={ fmt.Sprintf("%v", player.FinesOutstandingAmount) }
						placeholder="Fines Outstanding"
						class="w-full text-3xl px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600"
					/>
				</label>-->
				if len(msg) > 0 {
					@success(msg)
				}
				<div class="flex flex-row mt-2">
					<button type="submit" class={ bigPri }>Update Player</button>
				</div>
				<div class="flex flex-row mt-2">
					<button type="submit" hx-delete={ fmt.Sprintf("/players?playerId=%d", player.ID) } hx-confirm={ fmt.Sprintf("Are you sure you want to delete %s?", player.Name) } class={ bigDel }>Delete { player.Name }</button>
				</div>
			</div>
		</form>
	</div>
}


templ playerPaymentsButton(title string, displayType string, activeSeason *Season) {
	<div>
	if activeSeason != nil {
		<button hx-get={ fmt.Sprintf("/season/%d/payments?displayType=%s", activeSeason.ID, displayType) } hx-swap="outerHTML" 
			if displayType == "button" {
				class={ bigSec }
			} else {
				class={ bigPri }
			}
		 >{ title }</button>
	} else {
		@warning("no active season - player payments disabled")
	}
	</div>
}


templ viewPlayerPayments(playerPayments []PlayerPaymentsWithTotals, players []Player, activeSeason *Season) {
	<div hx-target="this">
		@playerPaymentsButton("Close Payments", "button", activeSeason)
		@addPlayerPayment(players, seasonId)
		<div class="flex flex-row w-full" >
			<div class="flex flex-col space-y-4">
				<div class="flex flex-row bg-gray-800 text-white p-4 rounded-t-lg">
					<div class="flex-1 font-bold">Player Name</div>
					<div class="flex-1 text-center font-bold">Total Payment</div>
					<div class="flex-1 text-right font-bold">Details</div>
				</div>

				for _, pay := range playerPayments {
					<div class="bg-gray-100 border-b last:rounded-b-lg last:border-b-0">
						<details class="p-4 hover:bg-gray-200 cursor-pointer">
							<summary class="flex flex-row items-center">
								<div class="flex-1 font-semibold text-gray-800">
									{pay.PlayerName}
								</div>
								<div class="flex-1 text-center text-gray-600">
									{fmt.Sprintf("$%v", pay.Total)}
								</div>
								<div class="flex-1 text-right text-gray-600">
									View Details
								</div>
							</summary>

							<div class="mt-4 space-y-2">
								for _, payment := range pay.PlayerPayments {
									<div class="flex flex-row bg-gray-50 p-2 rounded-lg">
										<div class="flex-1 text-gray-600">
											{payment.PaymentLoggedAt.Format("2006-01-02 15:04")}
										</div>
										<div class="flex-1 text-center text-gray-800">
											{fmt.Sprintf("$%v", payment.Amount)}
										</div>
										<div class="flex-1 text-right text-gray-600">
											Season: { fmt.Sprintf("%d", payment.SeasonID)}
										</div>
									</div>
								}
							</div>
						</details>
					</div>
				}
			</div>
		</div>
		@playerPaymentsButton("Close Payments", "button", activeSeason)
	</div>
}

templ addPlayerPayment(players []Player, seasonId uint){
	<div class="w-full mx-auto bg-gray-200 shadow-xl m-10">
	<script>
		window.emptyPlayerPayment = function(){
			debugger
			const elm = document.getElementById("select-player-pay")
			if(elm && elm.tomselect){
				elm.tomselect.clear()
			}
			const elm2 = document.getElementById("pay-amount")
			if(elm2){
				elm2.value = ""
			}
		}
	</script>
		<form hx-post={ fmt.Sprintf("/season/%d/payments", seasonId)} hx-target="#pay-response" hx-on::after-request="window.emptyPlayerPayment()" class="flex flex-col space-y-4 bg-white shadow-md p-6 rounded-lg">
			<div class="flex flex-row w-full">
				<select
					id="select-player-pay"
					required
					hx-ext="tomselect" 
					tx-max-items="99"
					name="players[]"
					tx-close-after-select="true"
					ts-item-class="text-5xl	py-5"
					ts-option-class="text-5xl w-full py-5"
					hx-debug="true"
					multiple
					placeholder="John Doe"
					class="text-3xl  border border-gray-300 rounded-md text-gray-700 flex-grow mb-2"
				>
					<option value="">Select a player...</option>
					for _, p := range players {
						<option value={ fmt.Sprintf("%d", p.ID) }>{ p.Name }</option>
					}
				</select>
				
			</div>
			<div>
			<label>
					Amount
					<input id="pay-amount" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" name="amount"></input>
				</label>
			</div>
			<button class={ bigAdd } type="submit">Add Payment</button>
			<div id="pay-response"></div>
		</form>
	</div>
}