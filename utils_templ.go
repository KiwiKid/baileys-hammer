// Code generated by templ@v0.2.364 DO NOT EDIT.

package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"
	"github.com/dustin/go-humanize"
	"time"
)

func tomSelectLinks() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<link href=\"https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/css/tom-select.css\" rel=\"stylesheet\"><script src=\"https://cdn.jsdelivr.net/npm/tom-select@2.3.1/dist/js/tom-select.complete.min.js\">")
		if err != nil {
			return err
		}
		var_2 := ``
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</script><script src=\"https://kiwikid.github.io/hx-tomselect/hx-tom-select.js\">")
		if err != nil {
			return err
		}
		var_3 := ``
		_, err = templBuffer.WriteString(var_3)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</script>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func getIdStr(id string) string {
	return fmt.Sprintf("#%s", id)
}

func contextSuccess(matchId uint64, contextStr string, fineAt time.Time) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_4 := templ.GetChildren(ctx)
		if var_4 == nil {
			var_4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var_5 := templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
			templBuffer, templIsBuffer := w.(*bytes.Buffer)
			if !templIsBuffer {
				templBuffer = templ.GetBuffer()
				defer templ.ReleaseBuffer(templBuffer)
			}
			_, err = templBuffer.WriteString("<h1>")
			if err != nil {
				return err
			}
			var_6 := `Added Context`
			_, err = templBuffer.WriteString(var_6)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h1> <div>")
			if err != nil {
				return err
			}
			var var_7 string = fmt.Sprintf("%d", matchId)
			_, err = templBuffer.WriteString(templ.EscapeString(var_7))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div> <div>")
			if err != nil {
				return err
			}
			var var_8 string = contextStr
			_, err = templBuffer.WriteString(templ.EscapeString(var_8))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div> <div>")
			if err != nil {
				return err
			}
			if fineAt.After(twoWeeksAgo) {
				var var_9 string = humanize.Time(fineAt)
				_, err = templBuffer.WriteString(templ.EscapeString(var_9))
				if err != nil {
					return err
				}
			} else {
				var var_10 string = fineAt.Format("2006-01-02T15:04")
				_, err = templBuffer.WriteString(templ.EscapeString(var_10))
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
			if !templIsBuffer {
				_, err = io.Copy(w, templBuffer)
			}
			return err
		})
		err = successComp().Render(templ.WithChildren(ctx, var_5), templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func successComp() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_11 := templ.GetChildren(ctx)
		if var_11 == nil {
			var_11 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-lg\"><p class=\"text-lg font-semibold\">")
		if err != nil {
			return err
		}
		err = var_11.Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</p></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func success(msg string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_12 := templ.GetChildren(ctx)
		if var_12 == nil {
			var_12 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if len(msg) > 0 {
			_, err = templBuffer.WriteString("<div class=\"bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-lg\"><p class=\"text-lg font-semibold\">")
			if err != nil {
				return err
			}
			var var_13 string = msg
			_, err = templBuffer.WriteString(templ.EscapeString(var_13))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</p></div>")
			if err != nil {
				return err
			}
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func warning(msg string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_14 := templ.GetChildren(ctx)
		if var_14 == nil {
			var_14 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		if len(msg) > 0 {
			_, err = templBuffer.WriteString("<div class=\"p-4 mb-4 text-blue-800 border border-blue-300 rounded-lg bg-blue-50 dark:bg-gray-800 dark:text-blue-400 dark:border-blue-800\"><p class=\"text-lg font-semibold\">")
			if err != nil {
				return err
			}
			var var_15 string = msg
			_, err = templBuffer.WriteString(templ.EscapeString(var_15))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</p></div>")
			if err != nil {
				return err
			}
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func errMsg(msg string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_16 := templ.GetChildren(ctx)
		if var_16 == nil {
			var_16 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-lg\"><p class=\"text-lg font-semibold\">")
		if err != nil {
			return err
		}
		var var_17 string = msg
		_, err = templBuffer.WriteString(templ.EscapeString(var_17))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</p></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func niceDate(date *time.Time) string {
	return date.Format("January 2, 2006")
}

func isSelected(selectedIds []uint, id uint) bool {
	for _, sid := range selectedIds {
		if sid == id {
			return true
		}
	}
	return false
}

func fineSuperSelect(players []PlayerWithFines, approvedPFines []PresetFine, selectedFineIds []uint) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_18 := templ.GetChildren(ctx)
		if var_18 == nil {
			var_18 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"w-full mx-auto bg-gray-200 shadow-xl m-10\" id=\"fine-ss\" hx-get=\"/fines/add\" hx-trigger=\"pageLoaded\" hx-target=\"#fine-ss\"><form id=\"ss-form\" hx-post=\"/fines-multi\" method=\"POST\" class=\"flex flex-col space-y-4 bg-white shadow-md p-6 rounded-lg\"><p class=\"font-bold text-3xl\">")
		if err != nil {
			return err
		}
		var_19 := `Select players and fines:`
		_, err = templBuffer.WriteString(var_19)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</p><div class=\"flex flex-row\"><select id=\"select-fine\" hx-ext=\"tomselect\" ts-persist=\"false\" ts-create=\"true\" ts-create-filter=\"true\" ts-clear-after-add=\"true\" ts-create-on-blur=\"true\" ts-add-post-url=\"/fines/add\" ts-open-on-focus=\"true\" ts-add-post-url-body-value=\"reason\" tx-close-after-select=\"false\" ts-item-class=\"text-3xl py-3\" ts-option-class=\"text-3xl w-full py-3 bg-green-100\" tx-max-items=\"99\" name=\"pfines[]\" multiple required placeholder=\"Select fine(s)...\" class=\"text-3xl border border-gray-300 rounded-md text-gray-700 flex-grow mb-2\"><option value=\"\">")
		if err != nil {
			return err
		}
		var_20 := `Select a fine...`
		_, err = templBuffer.WriteString(var_20)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option>")
		if err != nil {
			return err
		}
		for _, apf := range approvedPFines {
			if isSelected(selectedFineIds, apf.ID) {
				_, err = templBuffer.WriteString("<option selected value=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%d", apf.ID)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				var var_21 string = apf.Reason
				_, err = templBuffer.WriteString(templ.EscapeString(var_21))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</option>")
				if err != nil {
					return err
				}
			} else {
				_, err = templBuffer.WriteString("<option value=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%d", apf.ID)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				var var_22 string = apf.Reason
				_, err = templBuffer.WriteString(templ.EscapeString(var_22))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</option>")
				if err != nil {
					return err
				}
			}
		}
		_, err = templBuffer.WriteString("</select></div><div class=\"flex flex-row\"><select id=\"select-player\" required hx-ext=\"tomselect\" tx-max-items=\"99\" name=\"players[]\" ts-item-class=\"text-3xl py-3\" tx-close-after-select=\"true\" ts-option-class=\"text-3xl w-full py-3 bg-green-100\" multiple placeholder=\"Select player(s)...\" class=\"text-3xl  border border-gray-300 rounded-md text-gray-700 flex-grow mb-2\"><option value=\"\">")
		if err != nil {
			return err
		}
		var_23 := `Select a player...`
		_, err = templBuffer.WriteString(var_23)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option>")
		if err != nil {
			return err
		}
		for _, p := range players {
			_, err = templBuffer.WriteString("<option value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%d", p.ID)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var var_24 string = p.Name
			_, err = templBuffer.WriteString(templ.EscapeString(var_24))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</select></div><div class=\"flex flex-row\"><input type=\"text\" name=\"context\" value=\"\" class=\"px-4 py-2 border border-gray-300 rounded-lg w-full focus:ring-blue-500 focus:border-blue-500\" placeholder=\"Context for the fine\"></div>")
		if err != nil {
			return err
		}
		var var_25 = []any{bigAdd}
		err = templ.RenderCSSItems(ctx, templBuffer, var_25...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<button type=\"submit\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_25).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var_26 := `Create Fine(s)`
		_, err = templBuffer.WriteString(var_26)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button><div id=\"results-container\"></div></form></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func fineSuperSelectResults(players []PlayerWithFines, approvedPFines []PresetFine, newFines []Fine) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_27 := templ.GetChildren(ctx)
		if var_27 == nil {
			var_27 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		err = fineSuperSelect(players, approvedPFines, []uint{}).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		if len(newFines) > 0 {
			_, err = templBuffer.WriteString("<div class=\"text-2xl list-none bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-lg\"><h1 class=\"text-3xl\">")
			if err != nil {
				return err
			}
			var var_28 string = fmt.Sprintf("Added %d Fines:", len(newFines))
			_, err = templBuffer.WriteString(templ.EscapeString(var_28))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</h1>")
			if err != nil {
				return err
			}
			if len(newFines) > 0 {
				for _, p := range players {
					for _, nf := range newFines {
						if p.ID == nf.PlayerID {
							_, err = templBuffer.WriteString("<details><summary>")
							if err != nil {
								return err
							}
							var var_29 string = fmt.Sprintf("%s - %s - %s", nf.Reason, p.Name, nf.Context)
							_, err = templBuffer.WriteString(templ.EscapeString(var_29))
							if err != nil {
								return err
							}
							_, err = templBuffer.WriteString("</summary> ")
							if err != nil {
								return err
							}
							var var_30 string = fmt.Sprintf("%+v", nf)
							_, err = templBuffer.WriteString(templ.EscapeString(var_30))
							if err != nil {
								return err
							}
							_, err = templBuffer.WriteString(" ")
							if err != nil {
								return err
							}
							var var_31 = []any{smPri}
							err = templ.RenderCSSItems(ctx, templBuffer, var_31...)
							if err != nil {
								return err
							}
							_, err = templBuffer.WriteString("<button hx-get=\"")
							if err != nil {
								return err
							}
							_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/fines/edit/%d?isEdit=form", nf.ID)))
							if err != nil {
								return err
							}
							_, err = templBuffer.WriteString("\" hx-swap=\"outerHTML\" class=\"")
							if err != nil {
								return err
							}
							_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_31).String()))
							if err != nil {
								return err
							}
							_, err = templBuffer.WriteString("\">")
							if err != nil {
								return err
							}
							if len(nf.Context) == 0 {
								var_32 := `Add Context	`
								_, err = templBuffer.WriteString(var_32)
								if err != nil {
									return err
								}
							} else {
								var_33 := `Edit Context`
								_, err = templBuffer.WriteString(var_33)
								if err != nil {
									return err
								}
							}
							_, err = templBuffer.WriteString("</button>")
							if err != nil {
								return err
							}
							var var_34 = []any{del}
							err = templ.RenderCSSItems(ctx, templBuffer, var_34...)
							if err != nil {
								return err
							}
							_, err = templBuffer.WriteString("<button class=\"")
							if err != nil {
								return err
							}
							_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_34).String()))
							if err != nil {
								return err
							}
							_, err = templBuffer.WriteString("\" hx-confirm=\"Are you sure you want to delete the fine by this player?\" hx-delete=\"")
							if err != nil {
								return err
							}
							_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/fines?fid=%d", nf.ID)))
							if err != nil {
								return err
							}
							_, err = templBuffer.WriteString("\">")
							if err != nil {
								return err
							}
							var_35 := `Delete`
							_, err = templBuffer.WriteString(var_35)
							if err != nil {
								return err
							}
							_, err = templBuffer.WriteString("</button></details>")
							if err != nil {
								return err
							}
						}
					}
				}
			} else {
				_, err = templBuffer.WriteString("<div>")
				if err != nil {
					return err
				}
				var_36 := `No fines created? `
				_, err = templBuffer.WriteString(var_36)
				if err != nil {
					return err
				}
				var var_37 string = fmt.Sprintf("%d %d", len(approvedPFines))
				_, err = templBuffer.WriteString(templ.EscapeString(var_37))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		} else {
			_, err = templBuffer.WriteString("<div class=\"bg-orange-100 border-l-4 border-orange-500 text-orange-700 p-4\" role=\"alert\"><p>")
			if err != nil {
				return err
			}
			var_38 := `no fines added? Make sure to select fines/players above`
			_, err = templBuffer.WriteString(var_38)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</p></div>")
			if err != nil {
				return err
			}
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
