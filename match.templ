package main

import (
	"fmt"
	"time"
	"math"
	"github.com/dustin/go-humanize"
)

templ matchSelector(matches []Match, selectedMatchId uint) {
	<div class="flex flex-col text-3xl sm:flex-row">
		<label class="block text-gray-700">
			Match:
			if selectedMatchId == 0 {
				<span class="text-sm">
					⚠️ (no match set)
				</span>
			}
			<select
 				id="matchId"
 				name="matchId"
 				class="mt-1 block w-full pl-3 pr-10 py-2 border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 rounded-md"
			>
				>
				<option>NA</option>
				for _, m := range matches {
					<option
 						value={ fmt.Sprintf("%v",m.ID) }
 						if selectedMatchId == m.ID {
							selected
						}
					>vs { m.Opponent } - { humanize.Time(*m.StartTime) }</option>
				}
			</select>
		</label>
	</div>
}

templ matchMap(match Match) {
	if (math.Abs(match.MatchLat) > 0 && math.Abs(match.MatchLng) > 0) {
			<div
				data-center={ fmt.Sprintf("[%v, %v]", match.MatchLat, match.MatchLng) }
				data-zoom="15"
				data-reverse-order-all
				class="h-36 f-right"
				id="map"
			>
				<div data-tile="EsriWorldImagery"></div>
				<div data-tile="OpenStreetMap" data-default-tile></div>

										match.MatchPointList : { fmt.Sprintf("(%v) %v",  len(match.MatchPointList), match.MatchPointList)} 

				if len(match.MatchPointList) > 0 {
					<div>
						for mpi, matchPoint := range match.MatchPointList {
							<div data-hyperleaflet-source data-geometry-display="json">
								<span
									data-id={ fmt.Sprintf("%v", mpi + 1) }
									data-geometry-type="Point"
									data-geometry={ fmt.Sprintf("[%v, %v]", matchPoint.Lat, matchPoint.Lng) }
									></span>
								if mpi != len(match.MatchPointList) {
									<span
										data-id={ fmt.Sprintf("%v", mpi) }
										data-geometry-type="LineString"
										data-geometry={ fmt.Sprintf("[%v, %v], [%v, %v]", matchPoint.Lat, matchPoint.Lng,  match.MatchPointList[mpi + 1].Lat, match.MatchPointList[mpi + 1].Lng) }
									></span>
								}
							</div>
						}
					</div>
				}
		</div>
	}
}

templ matchListPage(matches []Match, isOpen bool, isFineMaster bool, noHeader bool) {
		<!DOCTYPE html>
		<html hx-boost="true">
		if !noHeader {
			@header()
		}
			<body class="text-2xl p-1">
			
			<div class="w-full bg-gray-200 shadow-xl m-10">
				if len(matches) > 0 {
					<div class="grid grid-cols-1 gap-4">
						for _, match := range matches {

							<div class="p-4 border-b md:border-b-0 md:border-r last:border-r-0" id={ F("mlp-%d", match.ID) }>
								<div class="flex justify-between items-center">
									<div>
										<div class="text-lg font-medium">{ match.Opponent }</div>
										<div class="text-sm text-gray-600">{ match.Location }</div>
									</div>
									if isFineMaster {
										<div class="flex-shrink-0">
											<a
												class={ F("%s inline-block bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600", bigPri) }
												hx-target={ F("#mlp-%d", match.ID) }
												hx-swap="outerHTML"
												hx-get={ F("/match/%d?type=form", match.ID) }
											>
												Edit
											</a>
										</div>
									}
								</div>
							</div>
						}
					</div>
				} else {
					<div class="text-center p-4">
						No Matches? 
						if isFineMaster {
							<a class="text-blue-500 hover:underline" href="/matches/new">Add one</a>
							to get started.
						} else {
							<a href="/#adminEntry">Enter Admin</a>
						}
						
					</div>
				}
				if isFineMaster {
					<div
						id="add-match-container"
						hx-get="/match?isOpen=true"
						hx-trigger="click"
						hx-swap="outerHTML"
						class={ bigAdd }
					>Add New Match</div>
				}
			</div>
			@pageFooter()
		</body>
	</html>
}

templ matchPage(data MatchPageData) {
	<!DOCTYPE html>
	<html hx-boost="true">
		@header()
		<body class="text-2xl p-1">
			<div class="mx-auto bg-gray-200 shadow-xl m-10">
				<h1 class="text-lg font-bold mb-4  text-center">{ GetTitle(ctx) }</h1>
				<div id="live-match" class=" mx-auto my-8 p-4 border border-gray-200 rounded-lg shadow">
					<h2 class="text-lg font-semibold mb-4">Live Match - { data.Match.Location } - { data.Match.Opponent }</h2>
					<div class="mb-4">
						<div id="match-details" class="mb-4"></div>
						<h3 class="text-md font-semibold mb-2">Events</h3>
						if data.Match.ID > 0 {
							<div
 								class="list-disc list-inside"
 								if data.isOpen {
									hx-get={ fmt.Sprintf("/match/%d/event?isOpen=true", data.Match.ID) }
								} else {
									hx-get={ fmt.Sprintf("/match/%d/event?isOpen=false", data.Match.ID) }
								}
 								hx-trigger="load once"
							></div>
							<div id={ fmt.Sprintf("event-list-%d", data.Match.ID) } hx-get={ fmt.Sprintf("/match/%d/events", data.Match.ID) } hx-trigger="click" hx-swap="innerHTML">(1)loading events...</div>
						}
					</div>
				</div>
			</div>
			@pageFooter()
		</body>
	</html>
}

templ listEvents(events []MatchEvent) {
	<div>
		[List event: 
		{ fmt.Sprintf("%v", len(events)) }
		]
	</div>
}

func nextSundayFormatted() string {
	now := time.Now()
	// Calculate days to add to get to the next Sunday
	daysToAdd := (7 - int(now.Weekday())) % 7
	if daysToAdd == 0 {
		daysToAdd = 7 // If today is Sunday, set next Sunday
	}
	nextSunday := now.AddDate(0, 0, daysToAdd)
	nextSunday = time.Date(nextSunday.Year(), nextSunday.Month(), nextSunday.Day(), 14, 0, 0, 0, nextSunday.Location()) // Set time to 2:00 PM
	return nextSunday.Format("2006-01-02T15:04")
}

templ createMatch(closeLink templ.SafeURL, players []PlayerWithFines) {
	<div class="mx-auto bg-gray-200 shadow-xl m-10">
		<form hx-post="/match" hx-swap="beforebegin" class="mx-auto my-8 p-4 border border-gray-200 rounded-lg shadow">
			<h2 class="text-lg font-semibold mb-4">Create New Match</h2>
			<div class="mb-4">
				<label for="opponent" class="block text-lg font-semibold text-gray-700">Opponent</label>
				<input type="text" name="opponent" id="opponent" required class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"/>
			</div>
			<div class="mb-4">
				<label for="location" class="block text-lg font-semibold text-gray-700">Location</label>
				<input type="text" name="location" id="location" required class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"/>
			</div>
			<div class="mb-4">
				<label for="start-time" class="block text-lg font-semibold text-gray-700">Start Time</label>
				<input type="datetime-local" name="startTime" id="start-time" value={ nextSundayFormatted() } class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"/>
			</div>
			<div id="player-select" class="hidden mt-4">
				<label class="text-lg font-semibold">Player:</label>
				<select name="playerId" class="mt-1 w-full border-gray-300  bg-white rounded-md shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
					<option selected value="">N/A</option>
					for _, p := range players {
						<option value={ S("%v", p.ID) }>
							{ S("%s", p.Name) }
						</option>
					}
				</select>
			</div>
			<div class="mb-4">
				<label for="subtitle" class="block text-lg font-semibold text-gray-700">Subtitle (optional)</label>
				<input type="text" name="subtitle" id="subtitle" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"/>
			</div>
			<div class="flex items-center justify-between mt-4">
				<button type="submit" class={ bigAdd }>Create Match</button>
			</div>
			<div class="flex items-center justify-between mt-4">
				<a href={ closeLink } class={ bigSec }>Close</a>
			</div>
		</form>
	</div>
}

templ editMatchContainer(closeLink templ.SafeURL, genMeta MatchMetaGeneral, successMsg string) {
	<!DOCTYPE html>
	<html hx-boost="true">
		@header()
		<body class="text-2xl p-1">
			@editMatch(closeLink, genMeta, successMsg)
			@pageFooter()
		</body>
	</html>
}

templ viewMatch(matchMeta MatchMetaGeneral) {
	<div class="m-2 w-full">
		<div
 			if len(matchMeta.GoalScorers) > int(matchMeta.OpponentGoalCount) {
				class="p-4 border-b last:border-b-0 bg-green-200"
			}
 			else
 			if (len(matchMeta.GoalScorers) == int(matchMeta.OpponentGoalCount)) {
				class="p-4 border-b last:border-b-0 bg-yellow-200"
			} else {
				class="p-4 border-b last:border-b-0 bg-red-200"
			}
		>{ F("%s - [%d - %d]", matchMeta.Match.Opponent, len(matchMeta.GoalScorers), matchMeta.OpponentGoalCount) }</div>
		<div>
			GoalScorers:
			for _, gs := range matchMeta.GoalScorers {
				<div class="text-sm text-gray-600">{ gs.Name }</div>
			}
		</div>
		if len(matchMeta.GoalAssisters) > 0 {
			<div>
				GoalAssisters:
				for _, gs := range matchMeta.GoalAssisters {
					<div class="text-sm text-gray-600">{ gs.Name }</div>
				}
			</div>
		}
		<div>
			for _, p := range matchMeta.Players {
				for _, f := range p.Fines {
					if f.MatchId == matchMeta.Match.ID {
						<div>
							{ fmt.Sprintf("$%v", f.Amount) }
							- 
							{ f.Reason }
							- 
							{ f.Context }
							- 
							{ f.Contest }
						</div>
					}
				}
			}
		</div>
		<div>
			if matchMeta.PlayerOfTheDay != nil && len(UsePlayerOfTheDayName(ctx)) > 0 {
				{ UsePlayerOfTheDayName(ctx) }
				: 
				{   matchMeta.PlayerOfTheDay.Name }
			}
		</div>
		<div>
			if matchMeta.DudOfTheDay != nil && len(UseDudOfTheDayName(ctx)) > 0 {
				{ UseDudOfTheDayName(ctx) }
				: 
				{  matchMeta.DudOfTheDay.Name }
			}
		</div>
		@matchMetaDebug(matchMeta)
	</div>
}

templ matchMetaDebug(genMeta MatchMetaGeneral) {
	<div class="text-sm text-gray-600">
		<details>
			<summary>debug</summary>
			<pre>
				{ fmt.Sprintf(`Match: %+v`, genMeta.Match) }
				<br/>
				<br/>
				Players: 
				for _, p := range genMeta.Players {
					Fines for 
					{ p.Name }
					for _, f := range p.Fines {
						if f.ID == genMeta.Match.ID {
							{ fmt.Sprintf(`%+v`, f) }
							<br/>
						}
					}
					== 
					{ p.Name }
					== 
					{ fmt.Sprintf(`%+v`, p) }
					<br/>
				}
			</pre>
		</details>
	</div>
} 

templ editMatch(closeLink templ.SafeURL, genMeta MatchMetaGeneral, successMsg string) {
	<div class="w-full mx-auto bg-gray-200 shadow-xl m-10" id={ fmt.Sprintf("edit-match-%d", genMeta.Match.ID) }>
		<form hx-post={ fmt.Sprintf("/match/%v", genMeta.Match.ID) } hx-trigger="submit" hx-swap="outerHTML" hx-target={ fmt.Sprintf("#edit-match-%d", genMeta.Match.ID) } class="mx-auto my-8 p-4 border border-gray-200 rounded-lg shadow">
			<div hx-get={ fmt.Sprintf("/match/%d?type=form", genMeta.Match.ID) }  class="text-lg underline font-semibold mb-4" >Edit Match - vs { genMeta.Match.Opponent }</div>
			<input
 				type="hidden"
 				name="matchId"
 				value={ fmt.Sprintf("%d", genMeta.Match.ID) }
			/>
			<div class="mb-4">
				<label for="opponent" class="block text-lg font-semibold text-gray-700">Opponent</label>
				<input type="text" name="opponent" id="opponent" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" value={ genMeta.Match.Opponent }/>
			</div>
			<div class="mb-4">
				<label for="location" class="block text-lg font-semibold text-gray-700">Location</label>
				<input type="text" name="location" id="location" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" value={ genMeta.Match.Location }/>
			</div>
			<!--<div class="mb-4">
				<label for="matchLat" class="block text-lg font-semibold text-gray-700">matchLat</label>
				<input type="text" name="matchLat" id="matchLat" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" value={ fmt.Sprintf("%v", genMeta.MatchLat) }/>
			</div>
			<div class="mb-4">
				<label for="matchLng" class="block text-lg font-semibold text-gray-700">matchLng</label>
				<input type="text" name="matchLng" id="matchLng" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" value={ fmt.Sprintf("%v", genMeta.MatchLng) }/>
			</div>-->
			<div class="mb-4">
				<label for="start-time" class="block text-lg font-semibold text-gray-700">Start Time</label>
				if genMeta.Match.StartTime != nil {
					{  genMeta.Match.StartTime.Format("2006-01-02T15:04") }
				}
				<input
 					type="datetime-local"
 					name="startTime"
 					id="start-time"
 					class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
 					if genMeta.Match.StartTime != nil {
						value={ genMeta.Match.StartTime.Format("2006-01-02T15:04") }
					}
				/>
			</div>
			<div class="mb-4 border-b-8 border-solid border-blue-500">
				<label for="subtitle" class="block text-lg font-semibold text-gray-700 ">Notes: (optional)</label>
				<input type="text" name="subtitle" id="subtitle" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500" value={ genMeta.Match.Subtitle }/>
			</div>
			<span>[game start]</span>
			if UseShowGoalScorerMatchList(ctx) {
				@playerEventInputSelector(genMeta.Players, genMeta.Match.Events, "goal")
			}
			if UseShowGoalAssister(ctx) {
				@playerEventInputSelector(genMeta.Players, genMeta.Match.Events, "assist")
			}
			if UseShowGoalScorerMatchList(ctx) {
				@playerEventInputSelector(genMeta.Players, genMeta.Match.Events, "conceded-goal")
			}
			if len(UseInjuryCounterTrackerName(ctx)) > 0 {
				@playerEventInputSelector(genMeta.Players, genMeta.Match.Events, "injury")
			}
			<span class="border-b-8 border-solid border-blue-500">			[fine-session-start]
			</span>
			<div class="p-10">
				<div hx-get="/fines/add" hx-trigger="load" hx-target="this"></div>
			</div>
			if len(UseDudOfTheDayName(ctx)) > 0 {
				@playerInputSelector(genMeta.Players, genMeta.Match.DudOfTheDay, "dotd")
			}
			if len(UsePlayerOfTheDayName(ctx)) > 0 {
				@playerInputSelector(genMeta.Players, genMeta.Match.PlayerOfTheDay, "potd")
			}
			@success(successMsg)
			<div class="flex items-center justify-between mt-4">
				<button type="submit" class={ bigAdd }>Update Match</button>
			</div>
			<div class="flex items-center justify-between mt-4">
				<a href={ closeLink } class={ bigSec }>Close</a>
			</div> 
			if UseMatchEventTracker(ctx) {
				<div class={ bigPri } hx-get={ fmt.Sprintf("/match/%v/events", genMeta.Match.ID) } hx-trigger="click" hx-target="#event-place" hx-swap="innerHTML">
					(
					{ F("Load %d events", len(genMeta.Match.Events)) }
					)
				</div>
				<div id="event-place"></div>
			}

			<details>
				<summary>danger zone</summary>
				<div class="flex items-center justify-between mt-20">
					<a hx-delete={ fmt.Sprintf("/match/%d", genMeta.Match.ID) } hx-confirm="Are you sure you want to delete this match?" class={ bigDel }>Delete</a>
				</div>
			</details>
			@matchMetaDebug(genMeta)
		</form>
	</div>
}

templ createNewEvent(matchId uint) {
	<form hx-post={ fmt.Sprintf("/match/%d/event", matchId) } class="mx-auto my-8 p-4 border border-gray-200 rounded-lg shadow">
		[createNewEvent
		: 
		{ fmt.Sprintf("%v", matchId) }
		]
		<h2 class="text-lg font-semibold mb-4">Create New Event</h2>
		<input
 			type="hidden"
 			name="matchId"
 			value={ fmt.Sprintf("%d", matchId) }
		/>
		<div class="mb-4">
			<label for="event-name" class="block text-sm font-medium text-gray-700">Event Name</label>
			<input type="text" name="eventName" id="event-name" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"/>
		</div>
		<div class="mb-4">
			<label for="event-type" class="block text-sm font-medium text-gray-700">Event Type</label>
			<select name="eventType" id="event-type" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
				<option value="goal">Goal</option>
				<option value="own-goal">Opponent Goal (Own Goal)</option>
				<option value="opponent-goal">Opponent Goal</option>
				<option value="subbed-off">Subbed Off</option>
				<option value="subbed-on">Subbed On</option>
			</select>
		</div>
		<div class="mb-4">
			<label for="event-time-offset" class="block text-sm font-medium text-gray-700">Event Time Offset</label>
			<select name="eventTimeOffset" id="event-time-offset" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
				<option value="now">Now</option>
			</select>
		</div>
		<button type="submit" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
			Create Event
		</button>
	</form>
}

