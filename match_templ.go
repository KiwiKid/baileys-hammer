// Code generated by templ@v0.2.364 DO NOT EDIT.

package main

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"
	"time"
)

func matchSelector(matches []Match, selectedMatchId uint) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"flex flex-col text-3xl sm:flex-row\"><label class=\"block text-gray-700\">")
		if err != nil {
			return err
		}
		var_2 := `Match:`
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		if selectedMatchId == 0 {
			_, err = templBuffer.WriteString("<span class=\"text-sm\">")
			if err != nil {
				return err
			}
			var_3 := `⚠️ (no match set)`
			_, err = templBuffer.WriteString(var_3)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</span>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("<select id=\"matchId\" name=\"matchId\" class=\"mt-1 block w-full pl-3 pr-10 py-2 border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 rounded-md\">")
		if err != nil {
			return err
		}
		var_4 := `>`
		_, err = templBuffer.WriteString(var_4)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" <option>")
		if err != nil {
			return err
		}
		var_5 := `NA`
		_, err = templBuffer.WriteString(var_5)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option>")
		if err != nil {
			return err
		}
		for _, m := range matches {
			_, err = templBuffer.WriteString("<option value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%v", m.ID)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"")
			if err != nil {
				return err
			}
			if selectedMatchId == m.ID {
				_, err = templBuffer.WriteString(" selected")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString(">")
			if err != nil {
				return err
			}
			var_6 := `vs `
			_, err = templBuffer.WriteString(var_6)
			if err != nil {
				return err
			}
			var var_7 string = m.Opponent
			_, err = templBuffer.WriteString(templ.EscapeString(var_7))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</select></label></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func matchListPage(matches []Match, isOpen bool) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_8 := templ.GetChildren(ctx)
		if var_8 == nil {
			var_8 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<html hx-boost=\"true\">")
		if err != nil {
			return err
		}
		err = header().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = tomSelectLinks().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<body class=\"text-2xl p-1\"><div class=\"w-full bg-gray-200 shadow-xl m-10\">")
		if err != nil {
			return err
		}
		if len(matches) > 0 {
			_, err = templBuffer.WriteString("<div class=\"grid grid-cols-1 gap-4\">")
			if err != nil {
				return err
			}
			for _, match := range matches {
				_, err = templBuffer.WriteString("<div class=\"p-4 border-b md:border-b-0 md:border-r last:border-r-0\" id=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(F("mlp-%d", match.ID)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\"><div class=\"flex justify-between items-center\"><div><div class=\"text-lg font-medium\">")
				if err != nil {
					return err
				}
				var var_9 string = match.Opponent
				_, err = templBuffer.WriteString(templ.EscapeString(var_9))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div><div class=\"text-sm text-gray-600\">")
				if err != nil {
					return err
				}
				var var_10 string = match.Location
				_, err = templBuffer.WriteString(templ.EscapeString(var_10))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div></div><div class=\"flex-shrink-0\">")
				if err != nil {
					return err
				}
				var var_11 = []any{F("%s inline-block bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600", bigPri)}
				err = templ.RenderCSSItems(ctx, templBuffer, var_11...)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("<a class=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_11).String()))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\" hx-target=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(F("#mlp-%d", match.ID)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\" hx-swap=\"outerHTML\" hx-get=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(F("/match/%d?type=form", match.ID)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\">")
				if err != nil {
					return err
				}
				var_12 := `Edit`
				_, err = templBuffer.WriteString(var_12)
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</a></div></div></div>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		} else {
			_, err = templBuffer.WriteString("<div class=\"text-center p-4\">")
			if err != nil {
				return err
			}
			var_13 := `No Matches? `
			_, err = templBuffer.WriteString(var_13)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" <a class=\"text-blue-500 hover:underline\" href=\"/matches/new\">")
			if err != nil {
				return err
			}
			var_14 := `Add one`
			_, err = templBuffer.WriteString(var_14)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a> ")
			if err != nil {
				return err
			}
			var_15 := `to get started.`
			_, err = templBuffer.WriteString(var_15)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		}
		var var_16 = []any{bigAdd}
		err = templ.RenderCSSItems(ctx, templBuffer, var_16...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div id=\"add-match-container\" hx-get=\"/match?isOpen=true\" hx-trigger=\"click\" hx-swap=\"outerHTML\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_16).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var_17 := `Add New Match`
		_, err = templBuffer.WriteString(var_17)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></div>")
		if err != nil {
			return err
		}
		err = pageFooter().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</body></html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func matchPage(data MatchPageData) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_18 := templ.GetChildren(ctx)
		if var_18 == nil {
			var_18 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<html hx-boost=\"true\">")
		if err != nil {
			return err
		}
		err = header().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<body class=\"text-2xl p-1\"><div class=\"mx-auto bg-gray-200 shadow-xl m-10\"><h1 class=\" font-bold mb-4  text-center\">")
		if err != nil {
			return err
		}
		var var_19 string = GetTitle(ctx)
		_, err = templBuffer.WriteString(templ.EscapeString(var_19))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h1><div id=\"live-match\" class=\" mx-auto my-8 p-4 border border-gray-200 rounded-lg shadow\"><h2 class=\"text-lg font-semibold mb-4\">")
		if err != nil {
			return err
		}
		var_20 := `Live Match - `
		_, err = templBuffer.WriteString(var_20)
		if err != nil {
			return err
		}
		var var_21 string = data.Match.Location
		_, err = templBuffer.WriteString(templ.EscapeString(var_21))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_22 := `- `
		_, err = templBuffer.WriteString(var_22)
		if err != nil {
			return err
		}
		var var_23 string = data.Match.Opponent
		_, err = templBuffer.WriteString(templ.EscapeString(var_23))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h2><div class=\"mb-4\"><div id=\"match-details\" class=\"mb-4\"></div><h3 class=\"text-md font-semibold mb-2\">")
		if err != nil {
			return err
		}
		var_24 := `Events`
		_, err = templBuffer.WriteString(var_24)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h3>")
		if err != nil {
			return err
		}
		if data.Match.ID > 0 {
			_, err = templBuffer.WriteString("<div class=\"list-disc list-inside\"")
			if err != nil {
				return err
			}
			if data.isOpen {
				_, err = templBuffer.WriteString(" hx-get=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/match/%d/event?isOpen=true", data.Match.ID)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\"")
				if err != nil {
					return err
				}
			} else {
				_, err = templBuffer.WriteString(" hx-get=\"")
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/match/%d/event?isOpen=false", data.Match.ID)))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("\"")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString(" hx-trigger=\"load once\"></div> <div id=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("event-list-%d", data.Match.ID)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-get=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/match/%d/events", data.Match.ID)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-trigger=\"click\" hx-swap=\"innerHTML\">")
			if err != nil {
				return err
			}
			var_25 := `(1)loading events...`
			_, err = templBuffer.WriteString(var_25)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div></div></div>")
		if err != nil {
			return err
		}
		err = pageFooter().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</body></html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func listEvents(events []MatchEvent) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_26 := templ.GetChildren(ctx)
		if var_26 == nil {
			var_26 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div>")
		if err != nil {
			return err
		}
		var_27 := `[List event: `
		_, err = templBuffer.WriteString(var_27)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var var_28 string = fmt.Sprintf("%v", len(events))
		_, err = templBuffer.WriteString(templ.EscapeString(var_28))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_29 := `]`
		_, err = templBuffer.WriteString(var_29)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func nextSundayFormatted() string {
	now := time.Now()
	// Calculate days to add to get to the next Sunday
	daysToAdd := (7 - int(now.Weekday())) % 7
	if daysToAdd == 0 {
		daysToAdd = 7 // If today is Sunday, set next Sunday
	}
	nextSunday := now.AddDate(0, 0, daysToAdd)
	nextSunday = time.Date(nextSunday.Year(), nextSunday.Month(), nextSunday.Day(), 14, 0, 0, 0, nextSunday.Location()) // Set time to 2:00 PM
	return nextSunday.Format("2006-01-02T15:04")
}

func createMatch(closeLink templ.SafeURL, players []PlayerWithFines) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_30 := templ.GetChildren(ctx)
		if var_30 == nil {
			var_30 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"mx-auto bg-gray-200 shadow-xl m-10\"><form hx-post=\"/match\" hx-swap=\"beforebegin\" class=\"mx-auto my-8 p-4 border border-gray-200 rounded-lg shadow\"><h2 class=\"text-lg font-semibold mb-4\">")
		if err != nil {
			return err
		}
		var_31 := `Create New Match`
		_, err = templBuffer.WriteString(var_31)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h2><div class=\"mb-4\"><label for=\"location\" class=\"block text-lg font-semibold text-gray-700\">")
		if err != nil {
			return err
		}
		var_32 := `Location`
		_, err = templBuffer.WriteString(var_32)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"text\" name=\"location\" id=\"location\" class=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"></div><div class=\"mb-4\"><label for=\"start-time\" class=\"block text-lg font-semibold text-gray-700\">")
		if err != nil {
			return err
		}
		var_33 := `Start Time`
		_, err = templBuffer.WriteString(var_33)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"datetime-local\" name=\"startTime\" id=\"start-time\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(nextSundayFormatted()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"></div><div class=\"mb-4\"><label for=\"opponent\" class=\"block text-lg font-semibold text-gray-700\">")
		if err != nil {
			return err
		}
		var_34 := `Opponent`
		_, err = templBuffer.WriteString(var_34)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"text\" name=\"opponent\" id=\"opponent\" class=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"></div><div id=\"player-select\" class=\"hidden mt-4\"><label class=\"text-lg font-semibold\">")
		if err != nil {
			return err
		}
		var_35 := `Player:`
		_, err = templBuffer.WriteString(var_35)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><select name=\"playerId\" class=\"mt-1 w-full border-gray-300  bg-white rounded-md shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\"><option selected value=\"\">")
		if err != nil {
			return err
		}
		var_36 := `N/A`
		_, err = templBuffer.WriteString(var_36)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option>")
		if err != nil {
			return err
		}
		for _, p := range players {
			_, err = templBuffer.WriteString("<option value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(S("%v", p.ID)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var var_37 string = S("%s", p.Name)
			_, err = templBuffer.WriteString(templ.EscapeString(var_37))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</option>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</select></div><div class=\"mb-4\"><label for=\"subtitle\" class=\"block text-lg font-semibold text-gray-700\">")
		if err != nil {
			return err
		}
		var_38 := `Subtitle (optional)`
		_, err = templBuffer.WriteString(var_38)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"text\" name=\"subtitle\" id=\"subtitle\" class=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"></div><div class=\"flex items-center justify-between mt-4\">")
		if err != nil {
			return err
		}
		var var_39 = []any{bigAdd}
		err = templ.RenderCSSItems(ctx, templBuffer, var_39...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<button type=\"submit\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_39).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var_40 := `Create Match`
		_, err = templBuffer.WriteString(var_40)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></div><div class=\"flex items-center justify-between mt-4\">")
		if err != nil {
			return err
		}
		var var_41 = []any{bigSec}
		err = templ.RenderCSSItems(ctx, templBuffer, var_41...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<a href=\"")
		if err != nil {
			return err
		}
		var var_42 templ.SafeURL = closeLink
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_42)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_41).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var_43 := `Close`
		_, err = templBuffer.WriteString(var_43)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></div></form></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func editMatchContainer(closeLink templ.SafeURL, genMeta MatchMetaGeneral, successMsg string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_44 := templ.GetChildren(ctx)
		if var_44 == nil {
			var_44 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<html hx-boost=\"true\">")
		if err != nil {
			return err
		}
		err = header().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = tomSelectLinks().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<body class=\"text-2xl p-1\">")
		if err != nil {
			return err
		}
		err = editMatch(closeLink, genMeta, successMsg).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = pageFooter().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</body></html>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func viewMatch(matchMeta MatchMetaGeneral) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_45 := templ.GetChildren(ctx)
		if var_45 == nil {
			var_45 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"m-2 w-full\"><div")
		if err != nil {
			return err
		}
		if len(matchMeta.GoalScorers) > int(matchMeta.OpponentGoalCount) {
			_, err = templBuffer.WriteString(" class=\"p-4 border-b last:border-b-0 bg-green-200\"")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" else")
		if err != nil {
			return err
		}
		if len(matchMeta.GoalScorers) == int(matchMeta.OpponentGoalCount) {
			_, err = templBuffer.WriteString(" class=\"p-4 border-b last:border-b-0 bg-yellow-200\"")
			if err != nil {
				return err
			}
		} else {
			_, err = templBuffer.WriteString(" class=\"p-4 border-b last:border-b-0 bg-red-200\"")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(">")
		if err != nil {
			return err
		}
		var var_46 string = F("%s - [%d - %d]", matchMeta.Match.Opponent, len(matchMeta.GoalScorers), matchMeta.OpponentGoalCount)
		_, err = templBuffer.WriteString(templ.EscapeString(var_46))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><div>")
		if err != nil {
			return err
		}
		var_47 := `GoalScorers:`
		_, err = templBuffer.WriteString(var_47)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		for _, gs := range matchMeta.GoalScorers {
			_, err = templBuffer.WriteString("<div class=\"text-sm text-gray-600\">")
			if err != nil {
				return err
			}
			var var_48 string = gs.Name
			_, err = templBuffer.WriteString(templ.EscapeString(var_48))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if len(matchMeta.GoalAssisters) > 0 {
			_, err = templBuffer.WriteString("<div>")
			if err != nil {
				return err
			}
			var_49 := `GoalAssisters:`
			_, err = templBuffer.WriteString(var_49)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			for _, gs := range matchMeta.GoalAssisters {
				_, err = templBuffer.WriteString("<div class=\"text-sm text-gray-600\">")
				if err != nil {
					return err
				}
				var var_50 string = gs.Name
				_, err = templBuffer.WriteString(templ.EscapeString(var_50))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</div>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("<div>")
		if err != nil {
			return err
		}
		for _, p := range matchMeta.Players {
			for _, f := range p.Fines {
				if f.MatchId == matchMeta.Match.ID {
					_, err = templBuffer.WriteString("<div>")
					if err != nil {
						return err
					}
					var var_51 string = fmt.Sprintf("$%v", f.Amount)
					_, err = templBuffer.WriteString(templ.EscapeString(var_51))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(" ")
					if err != nil {
						return err
					}
					var_52 := `- `
					_, err = templBuffer.WriteString(var_52)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(" ")
					if err != nil {
						return err
					}
					var var_53 string = f.Reason
					_, err = templBuffer.WriteString(templ.EscapeString(var_53))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(" ")
					if err != nil {
						return err
					}
					var_54 := `- `
					_, err = templBuffer.WriteString(var_54)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(" ")
					if err != nil {
						return err
					}
					var var_55 string = f.Context
					_, err = templBuffer.WriteString(templ.EscapeString(var_55))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(" ")
					if err != nil {
						return err
					}
					var_56 := `- `
					_, err = templBuffer.WriteString(var_56)
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(" ")
					if err != nil {
						return err
					}
					var var_57 string = f.Contest
					_, err = templBuffer.WriteString(templ.EscapeString(var_57))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString("</div>")
					if err != nil {
						return err
					}
				}
			}
		}
		_, err = templBuffer.WriteString("</div><div>")
		if err != nil {
			return err
		}
		if matchMeta.PlayerOfTheDay != nil && len(UsePlayerOfTheDayName(ctx)) > 0 {
			var var_58 string = UsePlayerOfTheDayName(ctx)
			_, err = templBuffer.WriteString(templ.EscapeString(var_58))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var_59 := `: `
			_, err = templBuffer.WriteString(var_59)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var var_60 string = matchMeta.PlayerOfTheDay.Name
			_, err = templBuffer.WriteString(templ.EscapeString(var_60))
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div><div>")
		if err != nil {
			return err
		}
		if matchMeta.DudOfTheDay != nil && len(UseDudOfTheDayName(ctx)) > 0 {
			var var_61 string = UseDudOfTheDayName(ctx)
			_, err = templBuffer.WriteString(templ.EscapeString(var_61))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var_62 := `: `
			_, err = templBuffer.WriteString(var_62)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var var_63 string = matchMeta.DudOfTheDay.Name
			_, err = templBuffer.WriteString(templ.EscapeString(var_63))
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		err = matchMetaDebug(matchMeta).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func matchMetaDebug(genMeta MatchMetaGeneral) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_64 := templ.GetChildren(ctx)
		if var_64 == nil {
			var_64 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"text-sm text-gray-600\"><details><summary>")
		if err != nil {
			return err
		}
		var_65 := `debug`
		_, err = templBuffer.WriteString(var_65)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</summary><pre>")
		if err != nil {
			return err
		}
		var var_66 string = fmt.Sprintf(`Match: %+v`, genMeta.Match)
		_, err = templBuffer.WriteString(templ.EscapeString(var_66))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" <br><br> ")
		if err != nil {
			return err
		}
		var_67 := `Players: `
		_, err = templBuffer.WriteString(var_67)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		for _, p := range genMeta.Players {
			var_68 := `Fines for `
			_, err = templBuffer.WriteString(var_68)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var var_69 string = p.Name
			_, err = templBuffer.WriteString(templ.EscapeString(var_69))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			for _, f := range p.Fines {
				if f.ID == genMeta.Match.ID {
					var var_70 string = fmt.Sprintf(`%+v`, f)
					_, err = templBuffer.WriteString(templ.EscapeString(var_70))
					if err != nil {
						return err
					}
					_, err = templBuffer.WriteString(" <br>")
					if err != nil {
						return err
					}
				}
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var_71 := `== `
			_, err = templBuffer.WriteString(var_71)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var var_72 string = p.Name
			_, err = templBuffer.WriteString(templ.EscapeString(var_72))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var_73 := `== `
			_, err = templBuffer.WriteString(var_73)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var var_74 string = fmt.Sprintf(`%+v`, p)
			_, err = templBuffer.WriteString(templ.EscapeString(var_74))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" <br>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</pre></details></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func editMatch(closeLink templ.SafeURL, genMeta MatchMetaGeneral, successMsg string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_75 := templ.GetChildren(ctx)
		if var_75 == nil {
			var_75 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"w-full mx-auto bg-gray-200 shadow-xl m-10\" id=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("edit-match-%d", genMeta.Match.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><form hx-post=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/match/%v", genMeta.Match.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-trigger=\"submit\" hx-swap=\"outerHTML\" hx-target=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("#edit-match-%d", genMeta.Match.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"mx-auto my-8 p-4 border border-gray-200 rounded-lg shadow\"><h2 class=\"text-lg font-semibold mb-4\" title=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%+v", genMeta)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var_76 := `Edit Match - vs `
		_, err = templBuffer.WriteString(var_76)
		if err != nil {
			return err
		}
		var var_77 string = genMeta.Match.Opponent
		_, err = templBuffer.WriteString(templ.EscapeString(var_77))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h2><input type=\"hidden\" name=\"matchId\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%d", genMeta.Match.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><div class=\"mb-4\"><label for=\"location\" class=\"block text-lg font-semibold text-gray-700\">")
		if err != nil {
			return err
		}
		var_78 := `Location`
		_, err = templBuffer.WriteString(var_78)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"text\" name=\"location\" id=\"location\" class=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(genMeta.Match.Location))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"></div><div class=\"mb-4\"><label for=\"start-time\" class=\"block text-lg font-semibold text-gray-700\">")
		if err != nil {
			return err
		}
		var_79 := `Start Time`
		_, err = templBuffer.WriteString(var_79)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"datetime-local\" name=\"startTime\" id=\"start-time\" class=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"")
		if err != nil {
			return err
		}
		if genMeta.Match.StartTime != nil {
			_, err = templBuffer.WriteString(" value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(genMeta.Match.StartTime.Format("2006-01-02T15:04")))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("></div><div class=\"mb-4\"><label for=\"opponent\" class=\"block text-lg font-semibold text-gray-700\">")
		if err != nil {
			return err
		}
		var_80 := `Opponent`
		_, err = templBuffer.WriteString(var_80)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"text\" name=\"opponent\" id=\"opponent\" class=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(genMeta.Match.Opponent))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"></div><div class=\"mb-4\"><label for=\"subtitle\" class=\"block text-lg font-semibold text-gray-700 \">")
		if err != nil {
			return err
		}
		var_81 := `Notes: (optional)`
		_, err = templBuffer.WriteString(var_81)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"text\" name=\"subtitle\" id=\"subtitle\" class=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(genMeta.Match.Subtitle))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"></div>")
		if err != nil {
			return err
		}
		if UseShowGoalScorerMatchList(ctx) {
			err = playerEventInputSelector(genMeta.Players, genMeta.Match.Events, "goal").Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		if UseShowGoalAssister(ctx) {
			err = playerEventInputSelector(genMeta.Players, genMeta.Match.Events, "assist").Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		if UseShowGoalScorerMatchList(ctx) {
			err = playerEventInputSelector(genMeta.Players, genMeta.Match.Events, "conceded-goal").Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		if len(UseInjuryCounterTrackerName(ctx)) > 0 {
			err = playerEventInputSelector(genMeta.Players, genMeta.Match.Events, "injury").Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_82 := `[wait for attentance]`
		_, err = templBuffer.WriteString(var_82)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" <div hx-get=\"/fines/add\" hx-trigger=\"load\" hx-target=\"this\"></div>")
		if err != nil {
			return err
		}
		if len(UseDudOfTheDayName(ctx)) > 0 {
			err = playerInputSelector(genMeta.Players, genMeta.Match.DudOfTheDay, "dotd").Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		if len(UsePlayerOfTheDayName(ctx)) > 0 {
			err = playerInputSelector(genMeta.Players, genMeta.Match.PlayerOfTheDay, "potd").Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		err = success(successMsg).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"flex items-center justify-between mt-4\">")
		if err != nil {
			return err
		}
		var var_83 = []any{bigAdd}
		err = templ.RenderCSSItems(ctx, templBuffer, var_83...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<button type=\"submit\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_83).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var_84 := `Update Match`
		_, err = templBuffer.WriteString(var_84)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></div><div class=\"flex items-center justify-between mt-4\">")
		if err != nil {
			return err
		}
		var var_85 = []any{bigSec}
		err = templ.RenderCSSItems(ctx, templBuffer, var_85...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<a href=\"")
		if err != nil {
			return err
		}
		var var_86 templ.SafeURL = closeLink
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_86)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_85).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var_87 := `Close`
		_, err = templBuffer.WriteString(var_87)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></div>")
		if err != nil {
			return err
		}
		if UseMatchEventTracker(ctx) {
			var var_88 = []any{bigPri}
			err = templ.RenderCSSItems(ctx, templBuffer, var_88...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<div class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_88).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-get=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/match/%v/events", genMeta.Match.ID)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-trigger=\"click\" hx-target=\"#event-place\" hx-swap=\"innerHTML\">")
			if err != nil {
				return err
			}
			var_89 := `(`
			_, err = templBuffer.WriteString(var_89)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var var_90 string = F("Load %d events", len(genMeta.Match.Events))
			_, err = templBuffer.WriteString(templ.EscapeString(var_90))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(" ")
			if err != nil {
				return err
			}
			var_91 := `)`
			_, err = templBuffer.WriteString(var_91)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div> <div id=\"event-place\"></div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("<details><summary>")
		if err != nil {
			return err
		}
		var_92 := `danger zone`
		_, err = templBuffer.WriteString(var_92)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</summary><div class=\"flex items-center justify-between mt-20\">")
		if err != nil {
			return err
		}
		var var_93 = []any{bigDel}
		err = templ.RenderCSSItems(ctx, templBuffer, var_93...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<a hx-delete=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/match/%d", genMeta.Match.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-confirm=\"Are you sure you want to delete this match?\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_93).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		var_94 := `Delete`
		_, err = templBuffer.WriteString(var_94)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</a></div></details>")
		if err != nil {
			return err
		}
		err = matchMetaDebug(genMeta).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</form></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func createNewEvent(matchId uint64) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_95 := templ.GetChildren(ctx)
		if var_95 == nil {
			var_95 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<form hx-post=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("/match/%d/event", matchId)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"mx-auto my-8 p-4 border border-gray-200 rounded-lg shadow\">")
		if err != nil {
			return err
		}
		var_96 := `[createNewEvent`
		_, err = templBuffer.WriteString(var_96)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_97 := `: `
		_, err = templBuffer.WriteString(var_97)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var var_98 string = fmt.Sprintf("%v", matchId)
		_, err = templBuffer.WriteString(templ.EscapeString(var_98))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_99 := `]`
		_, err = templBuffer.WriteString(var_99)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" <h2 class=\"text-lg font-semibold mb-4\">")
		if err != nil {
			return err
		}
		var_100 := `Create New Event`
		_, err = templBuffer.WriteString(var_100)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</h2><input type=\"hidden\" name=\"matchId\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf("%d", matchId)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><div class=\"mb-4\"><label for=\"event-name\" class=\"block text-sm font-medium text-gray-700\">")
		if err != nil {
			return err
		}
		var_101 := `Event Name`
		_, err = templBuffer.WriteString(var_101)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><input type=\"text\" name=\"eventName\" id=\"event-name\" class=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"></div><div class=\"mb-4\"><label for=\"event-type\" class=\"block text-sm font-medium text-gray-700\">")
		if err != nil {
			return err
		}
		var_102 := `Event Type`
		_, err = templBuffer.WriteString(var_102)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><select name=\"eventType\" id=\"event-type\" class=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"><option value=\"goal\">")
		if err != nil {
			return err
		}
		var_103 := `Goal`
		_, err = templBuffer.WriteString(var_103)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option><option value=\"own-goal\">")
		if err != nil {
			return err
		}
		var_104 := `Opponent Goal (Own Goal)`
		_, err = templBuffer.WriteString(var_104)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option><option value=\"opponent-goal\">")
		if err != nil {
			return err
		}
		var_105 := `Opponent Goal`
		_, err = templBuffer.WriteString(var_105)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option><option value=\"subbed-off\">")
		if err != nil {
			return err
		}
		var_106 := `Subbed Off`
		_, err = templBuffer.WriteString(var_106)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option><option value=\"subbed-on\">")
		if err != nil {
			return err
		}
		var_107 := `Subbed On`
		_, err = templBuffer.WriteString(var_107)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option></select></div><div class=\"mb-4\"><label for=\"event-time-offset\" class=\"block text-sm font-medium text-gray-700\">")
		if err != nil {
			return err
		}
		var_108 := `Event Time Offset`
		_, err = templBuffer.WriteString(var_108)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</label><select name=\"eventTimeOffset\" id=\"event-time-offset\" class=\"mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500\"><option value=\"now\">")
		if err != nil {
			return err
		}
		var_109 := `Now`
		_, err = templBuffer.WriteString(var_109)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</option></select></div><button type=\"submit\" class=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">")
		if err != nil {
			return err
		}
		var_110 := `Create Event`
		_, err = templBuffer.WriteString(var_110)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></form>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
