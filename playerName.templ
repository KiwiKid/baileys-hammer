package main

import (
	"fmt"
)

templ playerName(player Player) {
	<div>{ player.Name }</div>
}

templ playerInputSelector(players []PlayerWithFines, playerId uint64) {
	if len(UsePlayerOfTheDayName(ctx)) > 0 {
		<div hx-swap-oob="true" id="player-select-potd" class="mt-4">
			<label class="text-lg font-semibold">{ UsePlayerOfTheDayName(ctx) } ({ fmt.Sprintf("%d", len(players))  }):</label>
			<select name="playerOfTheDay" class="mt-1 w-full border-gray-300  bg-white rounded-md shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
				<option value="">N/A</option>
				for _, p := range players {
					<option
 						if p.ID == uint(playerId) {
							selected
						}
 						value={ S("%v", p.ID) }
					>
						{ S("%s", p.Name) }
					</option>
				}
			</select>
		</div>
	}
	if len(UseDudOfTheDayName(ctx)) > 0 {
		<div hx-swap-oob="true" id="player-select-dud-of-day" class="mt-4">
			<label class="text-lg font-semibold">{ UseDudOfTheDayName(ctx) } ({ fmt.Sprintf("%d", len(players))  }):</label>
			<select name="dudOfTheDay" class="mt-1 w-full border-gray-300  bg-white rounded-md shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
				<option value="">N/A</option>
				for _, p := range players {
					<option
 						if p.ID == uint(playerId) {
							selected
						}
 						value={ S("%v", p.ID) }
					>
						{ S("%s", p.Name) }
					</option>
				}
			</select>
		</div>
	}
}

templ playerRoleSelector(player PlayerWithFines, msg string) {
	<div class="" id="players-ss">
		<form class="todo" hx-post={ fmt.Sprintf("/players?playerId=%d", player.ID) } hx-swap="outerHTML">
			<div class="container p-2">
				<input
 					type="hidden"
 					name="ID"
 					value={ fmt.Sprintf("%d", player.ID) }
				/>
				<label for="role" class="block mt-2">
					Name      
					<input
 						type="text"
 						name="Name"
 						value={ player.Name }
 						id="name"
 						placeholder="Player name"
 						class="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600"
					/>
				</label>
				if UseRoles(ctx) {
					<label for="role" class="block mt-2">
						Role      
						<input
 							type="text"
 							name="role"
 							value={ player.Role }
 							id="role"
 							placeholder="Role"
 							class="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600"
						/>
					</label>
					<label for="role" class="block mt-2">
						Role Description      
						<input
 							type="text"
 							name="roleDescription"
 							id="roleDescription"
 							value={ player.RoleDescription }
 							placeholder="Role Description"
 							class="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-1 focus:ring-blue-600"
						/>
					</label>
				}
				if len(msg) > 0 {
					@success(msg)
				}
				<div class="flex flex-row mt-2">
					<button type="submit" class={ bigPri }>Update Player</button>
				</div>
				<div class="flex flex-row mt-2">
					<button type="submit" hx-delete={ fmt.Sprintf("/players?playerId=%d", player.ID) } hx-confirm={ fmt.Sprintf("Are you sure you want to delete %s?", player.Name) } class={ bigDel }>Delete { player.Name }</button>
				</div>
			</div>
		</form>
	</div>
}

