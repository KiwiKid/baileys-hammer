package main

import (
	"fmt"
	"log"
	"github.com/dustin/go-humanize"
)

var baseUrl = "/"


func makeSafeUrlWithAnchor(baseUrl string, fineListOpen bool, finesOpen bool, playersOpen bool, presetFinesOpen bool, anchorTag string) templ.SafeURL {
	url := makeUrl(baseUrl, fineListOpen, finesOpen, playersOpen, presetFinesOpen) + "#" +  anchorTag
	return templ.SafeURL(url)
}

func makeSafeUrl(baseUrl string, fineListOpen bool, finesOpen bool, playersOpen bool, presetFinesOpen bool) templ.SafeURL {
	url := makeUrl(baseUrl, fineListOpen, finesOpen, playersOpen, presetFinesOpen)
	return templ.SafeURL(url)
}

func makeUrl(fbaseUrl string, fineListOpen bool, finesOpen bool, playersOpen bool, presetFinesOpen bool) string {

	hp := HomeQueryParams{
		FinesOpen: finesOpen,
		PlayerOpen: playersOpen,
		PresetFinesOpen: presetFinesOpen,
		FineListOpen: fineListOpen,
	}

	url, err := GenerateUrl(fbaseUrl, &hp)
	if(err != nil){
		log.Fatalf("Generate url error: %+v", err)
	}
	return *url;
}

templ downArrow() {
	<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
		<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
	</svg>
}

var pri = "bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:scale-105 transition transform ease-out duration-200"

var sec = "bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg hover:scale-105 transition transform ease-out duration-200"

var add = "bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg hover:scale-105 transition transform ease-out duration-200"
var del = "bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg hover:scale-105 transition transform ease-out duration-200"

var bigBtnTxt = "mx-auto items-center justify-center w-4/5 text-center py-2 px-4 text-lg rounded-md border hover:bg-opacity-75 focus:outline-none"
var bigPri = fmt.Sprintf("%s %s", bigBtnTxt, pri)
var bigSec = fmt.Sprintf("%s %s", bigBtnTxt, sec)
var bigAdd = fmt.Sprintf("%s %s", bigBtnTxt, add)
var bigDel = fmt.Sprintf("%s %s", bigBtnTxt, del)

var S = fmt.Sprint
var F = fmt.Sprintf

templ header() {
	<head>
		<title>ðŸ”¨ Baileys Hammer ðŸ”¨</title>
		<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet"/>
		<script src="https://unpkg.com/hyperscript.org@0.9.12"></script>
		<script src="https://js.sentry-cdn.com/92ea17e9008bb6e6c7e88a3da4ee4aab.min.js" crossorigin="anonymous"></script>
	</head>
}

templ pageFooter() {
	<nav class="fixed inset-x-0 bottom-0 bg-gray-800 text-white">
		<div class="flex justify-between"> 
			<a href={ makeSafeUrlWithAnchor(baseUrl, true, false, false, false, "fines") } class="flex-1 text-center py-3 hover:bg-gray-700 text-3xl">Standard</a>
			<a href={ makeSafeUrlWithAnchor(baseUrl, false, true, false, false, "fine-add") } class="flex-1 text-center py-3 hover:bg-gray-700 text-3xl">Add</a>
			<a href={ makeSafeUrlWithAnchor(baseUrl, false, false, false, false, "leaderboard") } class="flex-1 text-center py-3 hover:bg-gray-700 text-3xl">Leaderboard</a>
			<a href={ makeSafeUrlWithAnchor(baseUrl, false, false, false, true, "fine-list-container") } class="flex-1 text-center py-3 hover:bg-gray-700 text-3xl">Recent</a>
		</div>
	</nav>
}

templ home(players []PlayerWithFines, approvedPFines []PresetFine, pendingPFines []PresetFine, qp HomeQueryParams) {
	<html hx-boost="true">
		@header()
		@tomSelectLinks()
		<body class="text-2xl">
			<div class="container mx-auto bg-gray-200 shadow-xl">
				<h1 class=" font-bold mb-4  text-center">ðŸ”¨ Baileys Hammer ðŸ”¨</h1>
				if len(approvedPFines) > 0 {
					<div class="bg-sepia-200 shadow-xl m-10 rounded-lg">
						<div id="fines" class="flex justify-center w-full mt-4">
							<a href={ makeSafeUrlWithAnchor(baseUrl, !qp.FineListOpen, false, false, false, "fines") } hx-transition="true" class={ bigPri }>Standard Fines</a>
						</div>
						if qp.FineListOpen {
							<ul class="list-inside space-y-3 text-lg font-handwriting text-brown-900">
								for _, pf := range approvedPFines {
									<li class="pl-6 border-l-4 border-gold-700 hover:bg-sepia-300 transition duration-300 ease-in-out">
										{ fmt.Sprintf("$%v - %s", pf.Amount, pf.Reason) }
									</li>
								}
							</ul>
							<a href={ makeSafeUrl(baseUrl, false, false, false, false) } hx-transition="true" class={ bigSec }>Close</a>
							<div class="w-full flex justify-center items-center">
								<div _="on click toggle .hidden on next &lt;section/&gt;" class="flex justify-center items-center cursor-pointer">
									<h3 class={ bigPri }>Pending Fines { fmt.Sprintf("(%d)", len(pendingPFines)) }</h3>
								</div>
							</div>
							if len(pendingPFines) > 0 {
								<section class="bg-sepia-200 shadow-xl m-10 rounded-lg hidden">
									<ul class="list-inside space-y-3 text-lg font-handwriting text-brown-900">
										for _, pf := range pendingPFines {
											<li class="pl-6 border-l-4 border-gold-700 hover:bg-sepia-300 transition duration-300 ease-in-out">
												{ fmt.Sprintf("$%v - %s", pf.Amount, pf.Reason) }
												<span class="ml-2 inline-block bg-red-100 text-red-800 font-bold px-2 py-1 rounded-full text-sm shadow-sm">(pending approval)</span>
											</li>
										}
									</ul>
								</section>
							}
						}
					</div>
				}
				@fineAddV2(baseUrl, qp.FinesOpen, players, approvedPFines, false)
			</div>
			<div class="flex bg-gray-100 mx-auto shadow-xl m-10" id="leaderboard">
				<div class="w-full mt-10">
					<h3 class="text-2xl font-bold text-center">Leaderboard</h3>
					<ul>
						for _, p := range players {
							<li class="m-4">
								<div
 									_="on click toggle .hidden on next &lt;section/&gt;"
 									class={ bigPri }
								>
									{ p.Name }
									- 
									{ fmt.Sprintf("$%d (%d)", p.TotalFines,  p.TotalFineCount) }
								</div>
								<section class="fines-info hidden">
									<div class="p-2">
										<div class="p-2">
											for _, f := range p.Fines {
												<div class="mt-1">
													<p>{ f.Reason } { fmt.Sprintf("$%.0f - %s", f.Amount, humanize.Time(f.FineAt)) }</p>
												</div>
											}
										</div>
									</div>
								</section>
							</li>
						}
					</ul>
				</div>
			</div>
			<div id="fine-list-container" class="h-screen" hx-get="/fines" hx-target="#fine-list-container" hx-swap="outerHTML" hx-trigger="load once, click" class="w-full text-center">loading latest..</div>
			<script src="https://unpkg.com/htmx.org"></script>
			@pageFooter()
		</body>
	</html>
}

templ fineAddRes(createdFines []Fine, createdPFines []PresetFine){
	<div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-lg" hx-swap-oob="true" id="created-fines">
		if len(createdFines) > 0 {
			if len(createdFines) == 1 {
				<div>Created Fine:</div>
			} else {
				<div>{ fmt.Sprintf("Created %d Fines:", len(createdFines)) }</div>
			}
			for _, cf := range createdFines {
				<li>
				{ fmt.Sprintf("%+v", cf.PlayerID) } - { cf.Reason }
				</li>
			}
			
		}
		if len(createdPFines) > 0 {
			<div>Sudgested Fine:</div>
			for _, cf := range createdPFines {
			<li>
				{ cf.Reason }
			</li>
		}
		}
	</div>
}


templ fineAddV2(baseUrl string, isOpen bool, players []PlayerWithFines, presetFines []PresetFine, isFineMaster bool) {
	<div class="container mx-auto bg-gray-200 shadow-xl m-10">
		if isOpen {
			<div class="flex justify-center w-full p-4" id="fine-add">
				<div class="flex flex-col justify-center w-full p-4">

					@fineSuperSelect(players, presetFines)
					<div class="flex justify-center w-full p-4">
						<a class={ bigPri } href={ makeSafeUrlWithAnchor(baseUrl, false, false, false, false, "fine-add") }>
							if isFineMaster {
								Close Fine a Player
							} else {
								Close Suggest a Fine
							}
						</a>
					</div>
				</div>
			</div>
		} else {
			<div class="flex justify-center w-full p-4" id="fine-add">
				<a class={ bigPri } href={ makeSafeUrlWithAnchor(baseUrl, false, true, false, false, "fine-add") }>
					if isFineMaster {
						Fine a Player
					} else {
						Suggest a Fine
					}
				</a>
			</div>
		}
	</div>
}

templ fineAdd(baseUrl string, isOpen bool, players []PlayerWithFines, presetFines []PresetFine, isFineMaster bool) {
	<div class="container mx-auto bg-gray-200 shadow-xl m-10">
		if isOpen {
			<div class="px-8 py-6 text-left bg-gray-200 m-10" id="fine-add">
				<h3 class="text-2xl font-bold text-center">
					if isFineMaster {
						Fine a Player:
					} else {
						Submit a Fine
					}
				</h3>
				<form hx-post="/fines" hx-target="#created-fines" class="mt-4">
					<div class="mt-4">
						<div class="border-t pt-4">
								<div class="mt-2">
									<label for="presetFineId" class="text-lg font-semibold">Fines
										<select
											id="presetFineId"
											name="presetFineId"
											class="bg-white w-full border border-gray-300 rounded-md text-gray-700 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
											placeholder="-- Select Fine --"
										>
											<option selected value="">--!!!! Select Fine --</option>
											<option value="-1">-- !!! Fine is not listed here --</option>
											<!-- Dynamic options will be inserted here -->
											for _, fp := range presetFines {
												if fp.Approved {
													<option value={ fmt.Sprintf("%v", fp.ID) }>
														{ fmt.Sprintf("%s ($%v)", fp.Reason, fp.Amount) }
													</option>
												}
											}
										</select>
										<script>
											new TomSelect("#presetFineId", {
												maxItems: 999,
												plugins: {
													remove_button: {
														title: 'Remove this fine',
													}
												},
												create: false, // Assuming no need for user to create new items (fines) dynamically
												persist: false, // No need to persistently add newly created items to the list
												render: {
													option: function(data, escape) {
														return '<div>' + escape(data.text) + '</div>';
													}
												},
											});
										</script>
								
									</label>
							</div>
							<section class="hidden" id="newFine">
								<div class="pt-4 border border-2 rounded">
									<label class="text-2xl font-bold text-center">New Fine</label>
									<div class="mt-4">
										<label for="reason" class="block">Title</label>
										<input type="text" name="reason" id="reason" placeholder="Reason for the fine" class="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"/>
									</div>
									<div class="mt-4">
										<label for="context" class="block">Details:</label>
										<input type="text" name="context" id="context" placeholder="More Context for the fine" class="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"/>
									</div>
									if isFineMaster {
										<div class="mt-4">
											<label for="amount" class="block">Amount ($)</label>
											<input type="text" name="amount" id="amount" placeholder="Amount" class="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"/>
										</div>
										<label>
											<input type="hidden" name="approved" value="on"/>
										</label>
									}
									<div class="grid grid-cols-2 gap-4">
										<div class="flex items-center justify-center p-4 border border-gray-200 rounded-lg">
											<input type="radio" id="oneOffFine" name="fineOption" value="oneOffFine" class="form-radio text-blue-600 transform scale-15"/>
											<label for="oneOffFine" class="ml-2 text-gray-800">One Off Fine</label>
										</div>
										<div class="flex items-center justify-center p-4 border border-gray-200 rounded-lg">
											<input type="radio" id="applyAgain" name="fineOption" value="applyAgain" class="form-radio text-blue-600 transform scale-15"/>
											<label for="applyAgain" class="ml-2 text-gray-800">Could Apply Again</label>
										</div>
									</div>
								</div>
							</section>
							<div class="mt-4">
								<label>Who:</label>
								<select name="playerId" class="mt-1 w-full border-gray-300  bg-white rounded-md shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
									<option selected value="">-- no player - just suggest fineable offence --</option>
									for _, p := range players {
										<option value={ fmt.Sprintf("%v", p.ID) }>
											{ fmt.Sprintf("%s", p.Name) }
										</option>
									}
								</select>
							</div>
						</div>
					</div>
					<div class="grid grid-cols-1 p-4 gap-4 mt-10">
						<button type="submit" class={ bigAdd }>Add Fine</button>
						<a href={ makeSafeUrlWithAnchor(baseUrl, false, false, false, false, "fine-add") } class={ bigSec }>Close</a>
					</div>
				</form>
			</div>
			<div id="created-fines"></div>
		} else {
			<div class="flex justify-center w-full p-4" id="fine-add">
				<a class={ bigPri } href={ makeSafeUrlWithAnchor(baseUrl, false, true, false, false, "fine-add") }>
					if isFineMaster {
						Fine a Player
					} else {
						Suggest a Fine
					}
				</a>
			</div>
		}
		<script>
		window.fpSelect = document.getElementById('presetFineId')
		if(window.fpSelect != null){
			fpSelect.addEventListener('change', function() {
				const section = document.getElementById('newFine');
				if (this.value == '-1') { // Change '2' to the value of the option that should show the section
					section.classList.remove('hidden');
				} else {
					section.classList.add('hidden');
				}
			});
		}else{
			console.warn('no fpSelect')
		}
	</script>
	</div>
}

