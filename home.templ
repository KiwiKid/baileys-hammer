package main

import (
	"fmt"
	"log"
)

var baseUrl = "/"

func makeSafeUrl(baseUrl string, finesOpen bool, playersOpen bool, presetFinesOpen bool) templ.SafeURL {
	url := makeUrl(baseUrl, finesOpen, playersOpen, presetFinesOpen)
	return templ.SafeURL(url)
}
func makeUrl(fbaseUrl string, finesOpen bool, playersOpen bool, presetFinesOpen bool) string {

	hp := HomeQueryParams{
		FinesOpen: finesOpen,
		PlayerOpen: playersOpen,
		PresetFinesOpen: presetFinesOpen,
	}

	url, err := GenerateUrl(fbaseUrl, &hp)
	if(err != nil){
		log.Fatalf("Generate url error: %+v", err)
	}
	return *url;
}

var pri = "bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:scale-105 transition transform ease-out duration-200"

var sec = "bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg hover:scale-105 transition transform ease-out duration-200"

var add = "bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg hover:scale-105 transition transform ease-out duration-200"


var bigPri = fmt.Sprintf("mx-auto items-center justify-center w-4/5 text-center py-2 px-4 text-lg rounded-md border hover:bg-opacity-75 focus:outline-none %s", pri)
var bigSec = fmt.Sprintf("mx-auto items-center justify-center w-4/5 text-center py-2 px-4 text-lg rounded-md border hover:bg-opacity-75 focus:outline-none %s", sec)

templ header() {
	<head>
		<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet"/>
		<script src="https://unpkg.com/hyperscript.org@0.9.12"></script>
	</head>
}

templ home(players []PlayerWithFines, pFines []PresetFine, qp HomeQueryParams) {
	<html>
		@header()
		<body>
			<div class="bg-yellow-400 border-l-4 border-yellow-800 text-yellow-800 p-2 text-center" role="alert">
				<p class="font-bold">ðŸš§ Under Construction (Version 1) ðŸš§</p>
			</div>
			<div>
				<a hx-transition="true" href="/">Reset</a>
			</div>
			<div class="container mx-auto p-4 text-center">
				<h1 class="text-2xl font-bold mb-4">ðŸ”¨ Baileys Hammer ðŸ”¨</h1>
				<div class="flex items-center justify-center bg-gray-100 mx-auto">
					<ul>
						for _, p := range players {
							<li class="mb-2">
								<div _="on click toggle .hidden on next &lt;section/&gt;" class="cursor-pointer p-2 bg-gray-200 rounded hover:bg-gray-300">
									{ p.Name }
									- 
									{ fmt.Sprintf("$%d", p.TotalFines) }
								</div>
								<section class="fines-info hidden">
									<div class="p-2">
										<p class="p-2">{ fmt.Sprintf("Number:%v TotalFines: %v", p.Number, p.TotalFines) }</p>
										<div class="p-2">
											for _, f := range p.Fines {
												<div class="mt-1">
													<p>Reason: { f.Reason } { fmt.Sprintf("$%.0f", f.Amount) }</p>
												</div>
											}
										</div>
									</div>
								</section>
							</li>
						}
					</ul>
				</div>
			</div>
			<div class="grid grid-cols-1 gap-2">
				@fineAdd(baseUrl, qp.FinesOpen, players, pFines)
			</div>
			<script src="https://unpkg.com/htmx.org"></script>
		</body>
	</html>
}

templ fineAdd(baseUrl string, isOpen bool, players []PlayerWithFines, presetFines []PresetFine) {
	if isOpen {
		<div class="px-8 py-6 mt-4 text-left bg-white shadow-lg">
			<h3 class="text-2xl font-bold text-center">Submit Fine</h3>
			<form hx-post="/fines" class="mt-4">
				<div class="mt-4">
					<label class="text-lg font-semibold">Select Player</label>
					<select name="playerId" class="mt-1 w-full border-gray-300 rounded-md shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
						for _, p := range players {
							<option value={ fmt.Sprintf("%v", p.PlayerID) }>
								{ fmt.Sprintf("%s ($%v)", p.Name, p.Number) }
							</option>
						}
					</select>
				</div>
				<div class="mt-8">
					<div class="border-t pt-4">
						<label class="text-lg font-semibold">Fine Option</label>
						<div class="mt-2">
							<select name="presetFineId" class="w-full border-gray-300 rounded-md shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
								<option selected value="">Custom Fine (complete below)</option>
								for _, fp := range presetFines {
									<option value={ fmt.Sprintf("%v", fp.ID) }>
										{ fmt.Sprintf("%s ($%v)", fp.Reason, fp.Amount) }
									</option>
								}
							</select>
						</div>
					</div>
				</div>
				<div class="mt-4">
					<label for="reason" class="block">Reason</label>
					<input type="text" name="reason" id="reason" placeholder="Reason for the fine" class="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"/>
				</div>
				<div class="mt-4">
					<label for="amount" class="block">Amount ($)</label>
					<input type="text" name="amount" id="amount" placeholder="Amount" class="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"/>
				</div>
				<div class="flex items-center justify-between w-full mt-8">
					<button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">Submit Fine</button>
					<a href={ makeSafeUrl(baseUrl, false, false, false) } class="inline-block align-baseline font-bold text-sm text-blue-500 hover:text-blue-800">Close</a>
				</div>
			</form>
		</div>
	} else {
		<div class="flex justify-center w-full">
			<a class={ bigPri } href={ makeSafeUrl(baseUrl, true, false, false) }>Sudgest Fine</a>
		</div>
	}
}

