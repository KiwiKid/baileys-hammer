package main

import (
	"fmt"
	"log"
	"time"
	"github.com/dustin/go-humanize"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
)


func makeSafeUrlWithAnchor(baseUrl string, fineListOpen bool, finesOpen bool, playersOpen bool, presetFinesOpen bool, manageOpen bool, anchorTag string) templ.SafeURL {
	url := makeUrl(baseUrl, fineListOpen, finesOpen, playersOpen, presetFinesOpen, manageOpen) + "#" +  anchorTag
	return templ.SafeURL(url)
}

func makeSafeUrlWithAnchorV2(baseUrl string, anchorTag string, useAnchor bool) templ.SafeURL {
	anchor := ""
	if(useAnchor){
		anchor = "#" +  anchorTag
	}
	switch(anchorTag){
		case "fine-add": {
			url := makeUrl(baseUrl, false, true, false, false, false) + anchor
			return templ.SafeURL(url)
		}
		case "preset-fine": {
			url := makeUrl(baseUrl, false, false, false, true, false) + anchor
			return templ.SafeURL(url)
		}
		case "players-manage": {
			url := makeUrl(baseUrl, false, false, true, false, false) + anchor
			return templ.SafeURL(url)
		}
		case "fine-list-container": {
			url := makeUrl(baseUrl, true, false, false, false, false) + anchor
			return templ.SafeURL(url)
		}
		case "standard-matches": {
			url := makeUrl(baseUrl, false, false, false, false, true) + anchor
			return templ.SafeURL(url)
		}
		case "manage-matches": {
			url := makeUrl(baseUrl, false, false, false, false, true) + anchor
			return templ.SafeURL(url)
		}
		default: {
			panic(fmt.Sprintf("Failed to match anchor [%s] tag ", anchorTag))
		}
	}
	
}

func makeSafeUrl(baseUrl string, fineListOpen bool, finesOpen bool, playersOpen bool, presetFinesOpen bool, matchesManage bool) templ.SafeURL {
	url := makeUrl(baseUrl, fineListOpen, finesOpen, playersOpen, presetFinesOpen, matchesManage)
	return templ.SafeURL(url)
}

func makeUrl(fbaseUrl string, fineListOpen bool, finesOpen bool, playersOpen bool, presetFinesOpen bool, matchesOpen bool) string {

	hp := HomeQueryParams{
		FinesOpen: finesOpen,
		PlayerOpen: playersOpen,
		PresetFinesOpen: presetFinesOpen,
		FineListOpen: fineListOpen,
		MatchesOpen: matchesOpen,
	}

	url, err := GenerateUrl(fbaseUrl, &hp)
	if(err != nil){
		log.Fatalf("Generate url error: %+v", err)
	}
	return *url;
}

templ downArrow() {
	<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
		<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
	</svg>
}

var Title = cases.Title(language.Und, cases.NoLower).String

templ header() {
	<head>
		<title>{ GetTitle(ctx) }</title>
		@headLinks()
		<script>
		htmx.defineExtension('select-hide', {

			onEvent: function(name, evt) {
				
				console.log(`select-hide-${name}`)
				if (name === "change") {
					console.log('select-hide-change-EVENT')
					var targetSelector = evt.target.getAttribute('hx-select-hide-target');
					var targetValue = evt.target.getAttribute('hx-select-hide-target-value');
					var targets = document.querySelectorAll(targetSelector);
					console.log(`Hiding ${targets?.length} targets: ${targetSelector}`)
					if(targets.length == 0){ 
						throw new Error(`select-hide target not found for ${targetSelector}`)
					}
	
					targets.forEach(function(target) {
						if (!targetValue || evt.target.value === targetValue) {
							console.log(`Hiding ${targets?.length} targets`)
							target.style.display = 'none';
						} else {
							target.style.display = '';  // Reset display property
						}
					});
				}
			}
		});
		</script>
		<style>
		.ts-control input {
			font-size: calc(2rem + 0.5vw);
			display: block;
			color: #a0a0a0;
		}

		.ts-dropdown-content {
			font-size: calc(2rem + 0.5vw);
  			line-height: 1;
			width: 100%;
			padding-top: 1.25rem;
			padding-bottom: 1.25rem;
			max-height: 1000px  !important;
		}


		</style>
	</head>
}

templ pageFooter() {
	<label class="relative z-40 cursor-pointer px-3 py-6" for="mobile-menu">
  <input class="peer hidden" type="checkbox" id="mobile-menu" />
  <div class="relative z-50 block h-1 w-7 bg-black transition-all duration-200 ease-out 
      before:absolute before:top-[-0.35rem] before:h-1 before:w-full before:bg-black 
      before:transition-all before:duration-200 before:ease-out
      after:absolute after:bottom-[-0.35rem] after:h-1 after:w-full after:bg-black 
      after:transition-all after:duration-200 after:ease-out
      peer-checked:bg-transparent before:peer-checked:top-0 before:peer-checked:rotate-45 
      after:peer-checked:bottom-0 after:peer-checked:-rotate-45">
  </div>
  <div class="fixed inset-0 z-30 hidden bg-black/50 backdrop-blur-sm peer-checked:block">
  </div>
  <div class="fixed top-0 right-0 z-40 w-16 translate-x-full transition-transform duration-500 peer-checked:translate-x-0 flex flex-col items-center justify-center space-y-4">
    <a href={ makeSafeUrlWithAnchor(baseUrl, false, true, false, false,false, "fine-add") } class="text-black hover:text-blue-500">
      <svg xmlns="http://www.w3.org/2000/svg" width="80px" height="80px" viewBox="0 0 24 24" fill="none">
		<path fill-rule="evenodd" clip-rule="evenodd" d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22ZM12.75 9C12.75 8.58579 12.4142 8.25 12 8.25C11.5858 8.25 11.25 8.58579 11.25 9L11.25 11.25H9C8.58579 11.25 8.25 11.5858 8.25 12C8.25 12.4142 8.58579 12.75 9 12.75H11.25V15C11.25 15.4142 11.5858 15.75 12 15.75C12.4142 15.75 12.75 15.4142 12.75 15L12.75 12.75H15C15.4142 12.75 15.75 12.4142 15.75 12C15.75 11.5858 15.4142 11.25 15 11.25H12.75V9Z" fill="#1C274C"/>
		</svg>
    </a>
	<a href={ makeSafeUrlWithAnchor(baseUrl, false, false, false, true,false, "recent-fine-list-container") } class="text-black hover:text-blue-500">
      
	 <svg xmlns="http://www.w3.org/2000/svg" width="80px" height="80px" viewBox="0 0 24 24" fill="none">
		<circle cx="12" cy="8" r="5" stroke="#1C274C" stroke-width="2"/>
		<path d="M12 5V11" stroke="#1C274C" stroke-width="2"/>
		<path d="M15 8H9" stroke="#1C274C" stroke-width="2"/>
		<path d="M21 14H18.0704C17.5464 14 17.2844 14 17.0633 14.1183C16.8422 14.2367 16.6969 14.4546 16.4063 14.8906L15.5937 16.1094C15.3031 16.5454 15.1578 16.7633 14.9367 16.8817C14.7156 17 14.4536 17 13.9296 17H10.0704C9.5464 17 9.28442 17 9.06333 16.8817C8.84223 16.7633 8.69691 16.5454 8.40627 16.1094L7.59373 14.8906C7.30309 14.4546 7.15777 14.2367 6.93667 14.1183C6.71558 14 6.4536 14 5.92963 14H3" stroke="#1C274C" stroke-width="2"/>
		<path d="M7 10H6.41421C6.149 10 5.89464 10.1054 5.70711 10.2929L3.29289 12.7071C3.10536 12.8946 3 13.149 3 13.4142V19C3 20.1046 3.89543 21 5 21H19C20.1046 21 21 20.1046 21 19V13.4142C21 13.149 20.8946 12.8946 20.7071 12.7071L18.2929 10.2929C18.1054 10.1054 17.851 10 17.5858 10H17" stroke="#1C274C" stroke-width="2" stroke-linecap="round"/>
		</svg>
    </a>
    <a href={ makeSafeUrlWithAnchor(baseUrl, false, false, false, false,false, "leaderboard") } class="text-black hover:text-blue-500">
     	<svg xmlns="http://www.w3.org/2000/svg" fill="#000000" width="80px" height="80px" viewBox="0 0 24 24" id="leaderboard-podium" data-name="Flat Color" class="icon flat-color"><path id="primary" d="M21,13H16V10a1,1,0,0,0-1-1H9a1,1,0,0,0-1,1v5H3a1,1,0,0,0-1,1v5a1,1,0,0,0,1,1H21a1,1,0,0,0,1-1V14A1,1,0,0,0,21,13Z" stroke="#1C274C"/><path id="secondary" d="M12.93,6.85a1,1,0,0,1-.47-.11L12,6.5l-.46.24a1,1,0,0,1-1.45-1.06l.09-.51L9.8,4.81a1,1,0,0,1,.56-1.71L10.87,3l.23-.47a1,1,0,0,1,1.8,0l.23.47.51.07a1,1,0,0,1,.56,1.71l-.38.36.09.51a1,1,0,0,1-.39,1A1,1,0,0,1,12.93,6.85Z" stroke="#1C274C"/></svg>
    </a>
    <a href={ makeSafeUrlWithAnchor(baseUrl, true, false, false, false,false, "fine-list-container") } class="text-black hover:text-blue-500">
		<svg xmlns="http://www.w3.org/2000/svg" width="80px" height="80px" viewBox="0 0 24 24" fill="none">
		<path fill-rule="evenodd" clip-rule="evenodd" d="M14.2788 2.15224C13.9085 2 13.439 2 12.5 2C11.561 2 11.0915 2 10.7212 2.15224C10.2274 2.35523 9.83509 2.74458 9.63056 3.23463C9.53719 3.45834 9.50065 3.7185 9.48635 4.09799C9.46534 4.65568 9.17716 5.17189 8.69017 5.45093C8.20318 5.72996 7.60864 5.71954 7.11149 5.45876C6.77318 5.2813 6.52789 5.18262 6.28599 5.15102C5.75609 5.08178 5.22018 5.22429 4.79616 5.5472C4.47814 5.78938 4.24339 6.1929 3.7739 6.99993C3.30441 7.80697 3.06967 8.21048 3.01735 8.60491C2.94758 9.1308 3.09118 9.66266 3.41655 10.0835C3.56506 10.2756 3.77377 10.437 4.0977 10.639C4.57391 10.936 4.88032 11.4419 4.88029 12C4.88026 12.5581 4.57386 13.0639 4.0977 13.3608C3.77372 13.5629 3.56497 13.7244 3.41645 13.9165C3.09108 14.3373 2.94749 14.8691 3.01725 15.395C3.06957 15.7894 3.30432 16.193 3.7738 17C4.24329 17.807 4.47804 18.2106 4.79606 18.4527C5.22008 18.7756 5.75599 18.9181 6.28589 18.8489C6.52778 18.8173 6.77305 18.7186 7.11133 18.5412C7.60852 18.2804 8.2031 18.27 8.69012 18.549C9.17714 18.8281 9.46533 19.3443 9.48635 19.9021C9.50065 20.2815 9.53719 20.5417 9.63056 20.7654C9.83509 21.2554 10.2274 21.6448 10.7212 21.8478C11.0915 22 11.561 22 12.5 22C13.439 22 13.9085 22 14.2788 21.8478C14.7726 21.6448 15.1649 21.2554 15.3694 20.7654C15.4628 20.5417 15.4994 20.2815 15.5137 19.902C15.5347 19.3443 15.8228 18.8281 16.3098 18.549C16.7968 18.2699 17.3914 18.2804 17.8886 18.5412C18.2269 18.7186 18.4721 18.8172 18.714 18.8488C19.2439 18.9181 19.7798 18.7756 20.2038 18.4527C20.5219 18.2105 20.7566 17.807 21.2261 16.9999C21.6956 16.1929 21.9303 15.7894 21.9827 15.395C22.0524 14.8691 21.9088 14.3372 21.5835 13.9164C21.4349 13.7243 21.2262 13.5628 20.9022 13.3608C20.4261 13.0639 20.1197 12.558 20.1197 11.9999C20.1197 11.4418 20.4261 10.9361 20.9022 10.6392C21.2263 10.4371 21.435 10.2757 21.5836 10.0835C21.9089 9.66273 22.0525 9.13087 21.9828 8.60497C21.9304 8.21055 21.6957 7.80703 21.2262 7C20.7567 6.19297 20.522 5.78945 20.2039 5.54727C19.7799 5.22436 19.244 5.08185 18.7141 5.15109C18.4722 5.18269 18.2269 5.28136 17.8887 5.4588C17.3915 5.71959 16.7969 5.73002 16.3099 5.45096C15.8229 5.17191 15.5347 4.65566 15.5136 4.09794C15.4993 3.71848 15.4628 3.45833 15.3694 3.23463C15.1649 2.74458 14.7726 2.35523 14.2788 2.15224ZM12.5 15C14.1695 15 15.5228 13.6569 15.5228 12C15.5228 10.3431 14.1695 9 12.5 9C10.8305 9 9.47716 10.3431 9.47716 12C9.47716 13.6569 10.8305 15 12.5 15Z" fill="#1C274C"/>
		</svg>
    </a>
  </div>
</label>


}

var twoWeeksAgo = time.Now().AddDate(0, 0, -14)

templ activeMatchBanner(activeMatch *Match) {
	if activeMatch != nil {
		<div class="top-0 p-4 left-0 w-full text-4xl  bg-green-400 text-white text-center py-2 shadow-md">
			if activeMatch.StartTime != nil {
				{ activeMatch.StartTime.Format("Jan 02 - 3:04 PM") }
			}
			{ F("vs %s @ %s", activeMatch.Opponent, activeMatch.Location) }
			@matchMap(*activeMatch)
		</div>
	}
}

templ adminEnter(previewPassword string){
	<form hx-post="/admin" id="adminEntry" class="p-10">
		if len(previewPassword) > 0 {
			@warning("Preview Mode active - password is visible, freely navigate into the finemaster zone via the 'Enter Fine Master Zone' button (set the password with PASS env var - hide the password via PREVIEW_ENV env var)")
		}
		<label>Password:
		<input value={ previewPassword } class="px-4 py-2 border border-gray-300 rounded-lg w-full focus:ring-blue-500 focus:border-blue-500" type="text" name="password"
		></input>
		</label>
		<button class={ bigSec } type="submit">Enter Fine Master Zone</button>
	</form>
}

templ home(players []PlayerWithFines, approvedPFines []PresetFine, pendingPFines []PresetFine, fineWithPlayers []FineWithPlayer, qp HomeQueryParams, matches []Match, activeMatch *Match, warnStr string, previewPassword string) {
	<!DOCTYPE html>
	<html hx-boost="true">
		@header()
		<body class="text-2xl p-3 flex justify-center">
			if len(warnStr) > 0 {
				@warning(warnStr)
			}
			<div class="lg:max-w-screen-2xl w-full">
				<div>
					@activeMatchBanner(activeMatch)
					<h1 class="font-bold mt-4 pb-4 text-center">{ GetTitle(ctx) }</h1>
					<div>
						@fineAddV2(baseUrl, true, players, approvedPFines, false)
						@fineList(fineWithPlayers, 0, 0, false, true)
					</div>
					if len(approvedPFines) > 0 {
						<div class="mx-auto bg-gray-200 shadow-xl p-2">
							if qp.FineListOpen {
								<ul class="list-inside space-y-3 text-lg font-handwriting text-brown-900">
									for _, pf := range approvedPFines {
										<li class="pl-6 border-l-4 border-gold-700 hover:bg-sepia-300 transition duration-300 ease-in-out">
											{ fmt.Sprintf("$%v - %s - %s", pf.Amount, pf.Reason, pf.Context) }
										</li>
									}
								</ul>
								<div id="fines" class="flex justify-center w-full p-3">
									<a href={ makeSafeUrlWithAnchor(baseUrl, !qp.FineListOpen, false, false, false, false, "fines") } hx-transition="true" 
									if qp.FineListOpen {
										class={ bigSec }
									} else {
										class={ bigPri }
									}
									>
									
										if qp.FineListOpen {
											Close Fine List
										} else {
											(Existing Fine List)
										}
									</a>
								</div>
								if len(pendingPFines) > 0 {
									<div class="w-full flex justify-center items-center">
										<div _="on click toggle .hidden on next &lt;section/&gt;" class="flex justify-center items-center cursor-pointer">
											<h3 class={ bigPri }>Pending Fines { fmt.Sprintf("(%d)", len(pendingPFines)) }</h3>
										</div>
									</div>
								}
								if len(pendingPFines) > 0 {
									<section class="bg-sepia-200 shadow-xl m-10 rounded-lg hidden">
										<ul class="list-inside space-y-3 text-lg font-handwriting text-brown-900">
											for _, pf := range pendingPFines {
												<li class="pl-6 border-l-4 border-gold-700 hover:bg-sepia-300 transition duration-300 ease-in-out">
													{ fmt.Sprintf("$%v - %s", pf.Amount, pf.Reason) }
													<span class="ml-2 inline-block bg-red-100 text-red-800 font-bold px-2 py-1 rounded-full text-lg font-semibold shadow-sm">(pending approval)</span>
												</li>
											}
										</ul>
									</section>
								}
							}
						</div>
					}
				</div>
				<div class={ containerClass } id="leaderboard">
					<div class="w-full">
						<div id="swipeArea" class="swipe-area w-full">
							<h3 class="text-2xl font-bold text-center">Leaderboard</h3>
						</div>
						<ul>
							for _, p := range players {
								<li class="m-4">
									<div
										_="on click toggle .hidden on next &lt;section/&gt;"
										class={ bigPri }
									>
										{ p.Name }
										- 
										{ fmt.Sprintf("$%d (%d)", p.TotalFines,  p.TotalFineCount) }
										if UseRoles(ctx) {
											if len(p.Role) > 0 {
												- 
												{ p.Role }
											}
										}
									</div>
									<section class="fines-info hidden">
										<div class="p-2">
											if UseRoles(ctx) {
												if len(p.Role) > 0 {
													<div>
														<div>
															{ p.Role }
															if len(p.RoleDescription) > 0 {
																- ( 
																{ p.RoleDescription }
																)
															}
														</div>
													</div>
												}
											}
											for _, f := range p.Fines {
												<div class="mt-4 bg-gray-100 p-4 rounded-lg flex flex-row flex-wrap justify-between">
													<div class="w-full sm:w-1/2 p-1">
														{ f.Reason }
													</div>
													<div class="w-full sm:w-1/2 p-1">
														{ fmt.Sprintf("$%.0f", f.Amount) }
													</div>
													<div class="w-full sm:w-1/2 p-1">
														if f.FineAt.After(twoWeeksAgo) {
															{ humanize.Time(f.FineAt) }
														} else {
															{ f.FineAt.Format("2006-01-02") }
														}
													</div>
													<div class="w-full sm:w-1/2 p-1">
														{ f.Context }
													</div>
													if len(f.Contest) > 0 {
														<div class="w-full sm:w-1/2 p-1">
															{ f.Contest }
														</div>
													}
												</div>
											}
										</div>
									</section>
								</li>
							}
						</ul>
					</div>
				</div>
				@matchesList(qp.MatchesOpen, matches, players, false)
				@fineList(fineWithPlayers, 0, 0,false, false)
				@adminEnter(previewPassword)
				@pageFooter()
			</div>
		</body>
	</html>
}

templ fineAddRes(createdFines []Fine, createdPFines []PresetFine) {
	<div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-lg" hx-swap-oob="true" id="created-fines">
		if len(createdFines) > 0 {
			if len(createdFines) == 1 {
				<div>Created Fine:</div>
			} else {
				<div>{ fmt.Sprintf("Created %d Fines:", len(createdFines)) }</div>
			}
			for _, cf := range createdFines {
				<li>
					{ fmt.Sprintf("%+v", cf.PlayerID) }
					- 
					{ cf.Reason }
				</li>
			}
		}
		if len(createdPFines) > 0 {
			<div>Sudgested Fine:</div>
			for _, cf := range createdPFines {
				<li>
					{ cf.Reason }
				</li>
			}
		}
	</div>
}

templ fineAddV2(baseUrl string, isOpen bool, players []PlayerWithFines, presetFines []PresetFine, isFineMaster bool) {
	<div class="w-full mx-auto bg-gray-200 shadow-xl m-10">
		if isOpen {
			<div class="flex justify-center w-full p-3" id="fine-add">
				<div class="flex flex-col justify-center w-full p-4">
					@fineSuperSelect(players, presetFines, []uint{}, "3")
					<!--
					if isFineMaster {
						<a class={ bigSec } href={ makeSafeUrlWithAnchor(baseUrl, false, false, false, false, false, "fine-add") }>
							Close Fine a Player
						</a>
					}
					-->
				</div>
			</div>
		} else {
			<div class="flex justify-center w-full p-4" id="fine-add">
				<a class={ bigPri } href={ makeSafeUrlWithAnchor(baseUrl, false, true, false, false, false, "fine-add") }>
					if isFineMaster {
						Fine a Player
					} else {
						Suggest a Fine
					}
				</a>
			</div>
		}
	</div>
}

templ fineAdd(baseUrl string, isOpen bool, players []PlayerWithFines, presetFines []PresetFine, isFineMaster bool) {
	<div class="mx-auto bg-gray-200 shadow-xl m-10">
		if isOpen {
			<div class="px-8 py-6 text-left bg-gray-200 m-10" id="fine-add">
				<h3 class="text-2xl font-bold text-center">
					if isFineMaster {
						Fine a Player:
					} else {
						Submit a Fine
					}
				</h3>
				<form hx-post="/fines" hx-target="#created-fines" class="mt-4">
					<div class="mt-4">
						<div class="border-t pt-4">
							<div class="mt-2">
								<label for="presetFineId" class="text-lg font-semibold">
									Fines
									<select
 										id="presetFineId"
 										name="presetFineId"
 										class="bg-white w-full border border-gray-300 rounded-md text-gray-700 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
 										placeholder="-- Select Fine --"
									>
										<option selected value="">--!!!! Select Fine --</option>
										<option value="-1">-- !!! Fine is not listed here --</option>
										<!-- Dynamic options will be inserted here -->
										for _, fp := range presetFines {
											if fp.Approved {
												<option value={ fmt.Sprintf("%v", fp.ID) }>
													{ fmt.Sprintf("%s ($%v)", fp.Reason, fp.Amount) }
												</option>
											}
										}
									</select>
									<script>
											new TomSelect("#presetFineId", {
												maxItems: 999,
												plugins: {
													remove_button: {
														title: 'Remove this fine',
													}
												},
												create: false, // Assuming no need for user to create new items (fines) dynamically
												persist: false, // No need to persistently add newly created items to the list
												render: {
													option: function(data, escape) {
														return '<div>' + escape(data.text) + '</div>';
													}
												},
												onItemAdd:function(){
													this.setTextboxValue('');
													this.refreshOptions();
												}
											});
										</script>
								</label>
							</div>
							<section class="hidden" id="newFine">
								<div class="pt-4 border border-2 rounded">
									<label class="text-2xl font-bold text-center">New Fine</label>
									<div class="mt-4">
										<label for="reason" class="text-lg font-semibold block">Title</label>
										<input type="text" name="reason" id="reason" placeholder="Reason for the fine" class="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"/>
									</div>
									<div class="mt-4">
										<label for="context" class="block text-lg font-semibold">Details:</label>
										<input type="text" name="context" id="context" placeholder="More Context for the fine" class="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"/>
									</div>
									if isFineMaster {
										<div class="mt-4">
											<label for="amount" class="block text-lg font-semibold">Amount ($)</label>
											<input type="text" name="amount" id="amount" placeholder="Amount" class="w-full px-4 py-2 mt-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"/>
										</div>
										<label>
											<input type="hidden" name="approved" value="on"/>
										</label>
									}
									<div class="grid grid-cols-2 gap-4">
										<div class="flex items-center justify-center p-4 border border-gray-200 rounded-lg">
											<input type="radio" id="oneOffFine" name="fineOption" value="oneOffFine" class="form-radio text-blue-600 transform scale-15"/>
											<label for="oneOffFine" class="ml-2 text-gray-800 text-lg font-semibold">One Off Fine</label>
										</div>
										<div class="flex items-center justify-center p-4 border border-gray-200 rounded-lg">
											<input type="radio" id="applyAgain" name="fineOption" value="applyAgain" class="form-radio text-blue-600 transform scale-15"/>
											<label for="applyAgain" class="ml-2 text-gray-800 text-lg font-semibold">Could Apply Again</label>
										</div>
									</div>
								</div>
							</section>
							<div class="mt-4">
								<label class="text-lg font-semibold">Who:</label>
								<select name="playerId" class="mt-1 w-full border-gray-300  bg-white rounded-md shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
									<option selected value="">-- no player - just suggest fineable offence --</option>
									for _, p := range players {
										<option value={ fmt.Sprintf("%v", p.ID) }>
											{ fmt.Sprintf("%s", p.Name) }
										</option>
									}
								</select>
							</div>
						</div>
					</div>
					<div class="grid grid-cols-1 p-4 gap-4 mt-10">
						<button type="submit" class={ bigAdd }>Add Fine</button>
						<a href={ makeSafeUrlWithAnchor(baseUrl, false, false, false, false, false, "fine-add") } class={ bigSec }>Close</a>
					</div>
				</form>
			</div>
			<div id="created-fines"></div>
		} else {
			<div class="flex justify-center w-full p-4" id="fine-add">
				<a class={ bigPri } href={ makeSafeUrlWithAnchor(baseUrl, false, true, false, false, false, "fine-add") }>
					if isFineMaster {
						Fine a Player
					} else {
						Suggest a Fine
					}
				</a>
			</div>
		}
		<script>
		window.fpSelect = document.getElementById('presetFineId')
		if(window.fpSelect != null){
			fpSelect.addEventListener('change', function() {
				const section = document.getElementById('newFine');
				if (this.value == '-1') { // Change '2' to the value of the option that should show the section
					section.classList.remove('hidden');
				} else {
					section.classList.add('hidden');
				}
			});
		}else{
			console.warn('no fpSelect')
		}
	</script>
	</div>
}

